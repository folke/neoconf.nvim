{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Language Support for Vue",
  "properties": {
    "vue.autoInsert.bracketSpacing": {
      "default": true,
      "description": "Auto add space between double curly brackets: {{|}} -> {{ | }}",
      "type": "boolean"
    },
    "vue.autoInsert.dotValue": {
      "default": false,
      "description": "Auto-complete Ref value with `.value`.",
      "type": "boolean"
    },
    "vue.codeActions.askNewComponentName": {
      "default": true,
      "description": "Ask for new component name when extract component.",
      "type": "boolean"
    },
    "vue.codeActions.enabled": {
      "default": true,
      "description": "Enabled code actions.",
      "type": "boolean"
    },
    "vue.codeLens.enabled": {
      "default": true,
      "description": "Enabled code lens.",
      "type": "boolean"
    },
    "vue.complete.casing.props": {
      "default": "autoKebab",
      "description": "Preferred attr name case.",
      "enum": [
        "autoKebab",
        "autoCamel",
        "kebab",
        "camel"
      ],
      "enumDescriptions": [
        "Auto Detect from Content (Fallback to :kebab-case=\"...\" if detect failed)",
        "Auto Detect from Content (Fallback to :camelCase=\"...\" if detect failed)",
        ":kebab-case=\"...\"",
        ":camelCase=\"...\""
      ],
      "type": "string"
    },
    "vue.complete.casing.tags": {
      "default": "autoPascal",
      "description": "Preferred tag name case.",
      "enum": [
        "autoKebab",
        "autoPascal",
        "kebab",
        "pascal"
      ],
      "enumDescriptions": [
        "Auto Detect from Content (Fallback to <kebab-case> if detect failed)",
        "Auto Detect from Content  (Fallback to <PascalCase> if detect failed)",
        "<kebab-case>",
        "<PascalCase>"
      ],
      "type": "string"
    },
    "vue.doctor.status": {
      "default": true,
      "description": "Show known problems in status bar.",
      "type": "boolean"
    },
    "vue.format.script.initialIndent": {
      "default": false,
      "type": "boolean"
    },
    "vue.format.style.initialIndent": {
      "default": false,
      "type": "boolean"
    },
    "vue.format.template.initialIndent": {
      "default": true,
      "type": "boolean"
    },
    "vue.format.wrapAttributes": {
      "default": "auto",
      "enum": [
        "auto",
        "force",
        "force-aligned",
        "force-expand-multiline",
        "aligned-multiple",
        "preserve",
        "preserve-aligned"
      ],
      "type": "string"
    },
    "vue.inlayHints.inlineHandlerLeading": {
      "default": false,
      "description": "Show inlay hints for event argument in inline handlers.",
      "type": "boolean"
    },
    "vue.inlayHints.missingProps": {
      "default": false,
      "description": "Show inlay hints for missing required props.",
      "type": "boolean"
    },
    "vue.inlayHints.optionsWrapper": {
      "default": false,
      "description": "Show inlay hints for component options wrapper for type support.",
      "type": "boolean"
    },
    "vue.inlayHints.vBindShorthand": {
      "default": false,
      "description": "Show inlay hints for v-bind shorthand.",
      "type": "boolean"
    },
    "vue.server.hybridMode": {
      "default": "auto",
      "description": "Vue language server only handles CSS and HTML language support, and tsserver takes over TS language support via TS plugin.",
      "enum": [
        "auto",
        "typeScriptPluginOnly",
        true,
        false
      ],
      "enumDescriptions": [
        "Automatically detect and enable TypeScript Plugin/Hybrid Mode in a safe environment.",
        "Only enable Vue TypeScript Plugin but disable Hybrid Mode.",
        "Enable TypeScript Plugin/Hybrid Mode.",
        "Disable TypeScript Plugin/Hybrid Mode."
      ],
      "type": "boolean"
    },
    "vue.server.includeLanguages": {
      "default": [
        "vue"
      ],
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "vue.server.maxOldSpaceSize": {
      "default": null,
      "description": "Set --max-old-space-size option on server process. If you have problem on frequently \"Request textDocument/** failed.\" error, try setting higher memory(MB) on it.",
      "type": [
        "number",
        "null"
      ]
    },
    "vue.splitEditors.icon": {
      "default": false,
      "description": "Show split editor icon in title area of editor.",
      "type": "boolean"
    },
    "vue.splitEditors.layout.left": {
      "default": [
        "script",
        "scriptSetup",
        "styles"
      ],
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "vue.splitEditors.layout.right": {
      "default": [
        "template",
        "customBlocks"
      ],
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "vue.trace.server": {
      "default": "off",
      "description": "Traces the communication between VS Code and the language server.",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "scope": "window",
      "type": "string"
    },
    "vue.updateImportsOnFileMove.enabled": {
      "default": true,
      "description": "Enabled update imports on file move.",
      "type": "boolean"
    }
  }
}
