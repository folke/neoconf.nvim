{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Language support for Vue 3",
  "properties": {
    "typescript.tsdk": {
      "type": "string"
    },
    "volar.format.initialIndent": {
      "default": {
        "html": true
      },
      "description": "Whether to have initial indent.",
      "properties": {
        "css": {
          "default": false,
          "type": "boolean"
        },
        "html": {
          "default": true,
          "type": "boolean"
        },
        "jade": {
          "default": false,
          "type": "boolean"
        },
        "javascript": {
          "default": false,
          "type": "boolean"
        },
        "javascriptreact": {
          "default": false,
          "type": "boolean"
        },
        "json": {
          "default": false,
          "type": "boolean"
        },
        "json5": {
          "default": false,
          "type": "boolean"
        },
        "jsonc": {
          "default": false,
          "type": "boolean"
        },
        "less": {
          "default": false,
          "type": "boolean"
        },
        "sass": {
          "default": false,
          "type": "boolean"
        },
        "scss": {
          "default": false,
          "type": "boolean"
        },
        "typescript": {
          "default": false,
          "type": "boolean"
        },
        "typescriptreact": {
          "default": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "volar.takeOverMode.extension": {
      "default": "Vue.volar",
      "description": "The extension that take over language support for *.ts.",
      "type": "string"
    },
    "vue-semantic-server.trace.server": {
      "default": "off",
      "description": "Traces the communication between VS Code and the language server.",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "scope": "window",
      "type": "string"
    },
    "vue-syntactic-server.trace.server": {
      "default": "off",
      "description": "Traces the communication between VS Code and the language server.",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "scope": "window",
      "type": "string"
    },
    "vue.autoInsert.bracketSpacing": {
      "default": true,
      "description": "Auto add space between double curly brackets: {{|}} -> {{ | }}",
      "type": "boolean"
    },
    "vue.autoInsert.dotValue": {
      "default": false,
      "description": "Auto-complete Ref value with `.value`.",
      "type": "boolean"
    },
    "vue.autoInsert.parentheses": {
      "default": true,
      "description": "Auto-wrap `()` to As Expression in interpolations for fix issue #520.",
      "type": "boolean"
    },
    "vue.codeActions.enabled": {
      "default": true,
      "description": "Enabled code actions.",
      "type": "boolean"
    },
    "vue.codeLens.enabled": {
      "default": true,
      "description": "Enabled code lens.",
      "type": "boolean"
    },
    "vue.complete.casing.props": {
      "default": "autoKebab",
      "description": "Preferred attr name case.",
      "enum": [
        "autoKebab",
        "autoCamel",
        "kebab",
        "camel"
      ],
      "enumDescriptions": [
        "Auto Detect from Content (Fallback to :kebab-case=\"...\" if detect failed)",
        "Auto Detect from Content (Fallback to :camelCase=\"...\" if detect failed)",
        ":kebab-case=\"...\"",
        ":camelCase=\"...\""
      ],
      "type": "string"
    },
    "vue.complete.casing.status": {
      "default": true,
      "description": "Show name casing in status bar.",
      "type": "boolean"
    },
    "vue.complete.casing.tags": {
      "default": "autoPascal",
      "description": "Preferred tag name case.",
      "enum": [
        "autoKebab",
        "autoPascal",
        "kebab",
        "pascal"
      ],
      "enumDescriptions": [
        "Auto Detect from Content (Fallback to <kebab-case> if detect failed)",
        "Auto Detect from Content  (Fallback to <PascalCase> if detect failed)",
        "<kebab-case>",
        "<PascalCase>"
      ],
      "type": "string"
    },
    "vue.complete.normalizeComponentImportName": {
      "default": true,
      "description": "Normalize import name for auto import. (\"myCompVue\" -> \"MyComp\")",
      "type": "boolean"
    },
    "vue.doctor.status": {
      "default": true,
      "description": "Show known problems in status bar.",
      "type": "boolean"
    },
    "vue.inlayHints.inlineHandlerLeading": {
      "default": false,
      "description": "Show inlay hints for event argument in inline handlers.",
      "type": "boolean"
    },
    "vue.inlayHints.missingProps": {
      "default": false,
      "description": "Show inlay hints for missing required props.",
      "type": "boolean"
    },
    "vue.inlayHints.optionsWrapper": {
      "default": false,
      "description": "Show inlay hints for component options wrapper for type support.",
      "type": "boolean"
    },
    "vue.server.additionalExtensions": {
      "default": [],
      "description": "List any additional file extensions that should be processed as Vue files (requires restart).",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "vue.server.configFilePath": {
      "default": "./volar.config.js",
      "description": "Path to volar.config.js.",
      "type": "string"
    },
    "vue.server.diagnosticModel": {
      "default": "push",
      "description": "Diagnostic update model.",
      "enum": [
        "push",
        "pull"
      ],
      "enumDescriptions": [
        "Diagnostic push by language server.",
        "Diagnostic pull by language client."
      ],
      "type": "string"
    },
    "vue.server.fullCompletionList": {
      "default": false,
      "description": "Enable this option if you want to get complete CompletionList in language client. (Disable for better performance)",
      "type": "boolean"
    },
    "vue.server.maxFileSize": {
      "default": 20971520,
      "description": "Maximum file size for Vue Language Server to load. (default: 20MB)",
      "type": "number"
    },
    "vue.server.maxOldSpaceSize": {
      "default": null,
      "description": "Set --max-old-space-size option on server process. If you have problem on frequently \"Request textDocument/** failed.\" error, try setting higher memory(MB) on it.",
      "type": [
        "number",
        "null"
      ]
    },
    "vue.server.path": {
      "default": null,
      "description": "Path to node_modules/vue-language-server/bin/vue-language-server.js.",
      "type": [
        "string",
        "null"
      ]
    },
    "vue.server.petiteVue.supportHtmlFile": {
      "default": false,
      "type": "boolean"
    },
    "vue.server.reverseConfigFilePriority": {
      "default": false,
      "description": "Reverse priority for tsconfig pickup.",
      "type": "boolean"
    },
    "vue.server.runtime": {
      "default": "node",
      "description": "Vue Language Server runtime.",
      "enum": [
        "node",
        "bun"
      ],
      "type": "string"
    },
    "vue.server.vitePress.supportMdFile": {
      "default": false,
      "type": "boolean"
    },
    "vue.splitEditors.icon": {
      "default": false,
      "description": "Show split editor icon in title area of editor.",
      "type": "boolean"
    },
    "vue.splitEditors.layout.left": {
      "default": [
        "script",
        "scriptSetup",
        "styles"
      ],
      "type": "array"
    },
    "vue.splitEditors.layout.right": {
      "default": [
        "template",
        "customBlocks"
      ],
      "type": "array"
    },
    "vue.updateImportsOnFileMove.enabled": {
      "default": false,
      "description": "Enabled update imports on file move.",
      "type": "boolean"
    }
  }
}
