{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Language Support for Vue",
  "properties": {
    "vue.autoInsert.bracketSpacing": {
      "default": true,
      "markdownDescription": "%configuration.autoInsert.bracketSpacing%",
      "type": "boolean"
    },
    "vue.autoInsert.dotValue": {
      "default": false,
      "markdownDescription": "%configuration.autoInsert.dotValue%",
      "type": "boolean"
    },
    "vue.codeActions.askNewComponentName": {
      "default": true,
      "markdownDescription": "%configuration.codeActions.askNewComponentName%",
      "type": "boolean"
    },
    "vue.codeActions.enabled": {
      "default": true,
      "markdownDescription": "%configuration.codeActions.enabled%",
      "type": "boolean"
    },
    "vue.codeLens.enabled": {
      "default": true,
      "markdownDescription": "%configuration.codeLens.enabled%",
      "type": "boolean"
    },
    "vue.complete.casing.props": {
      "default": "autoKebab",
      "enum": [
        "autoKebab",
        "autoCamel",
        "kebab",
        "camel"
      ],
      "enumDescriptions": [
        "Auto Detect from Content (Fallback to :kebab-case=\"...\" if detect failed)",
        "Auto Detect from Content (Fallback to :camelCase=\"...\" if detect failed)",
        ":kebab-case=\"...\"",
        ":camelCase=\"...\""
      ],
      "markdownDescription": "%configuration.complete.casing.props%",
      "type": "string"
    },
    "vue.complete.casing.tags": {
      "default": "autoPascal",
      "enum": [
        "autoKebab",
        "autoPascal",
        "kebab",
        "pascal"
      ],
      "enumDescriptions": [
        "Auto Detect from Content (Fallback to <kebab-case> if detect failed)",
        "Auto Detect from Content  (Fallback to <PascalCase> if detect failed)",
        "<kebab-case>",
        "<PascalCase>"
      ],
      "markdownDescription": "%configuration.complete.casing.tags%",
      "type": "string"
    },
    "vue.complete.defineAssignment": {
      "default": true,
      "markdownDescription": "%configuration.complete.defineAssignment%",
      "type": "boolean"
    },
    "vue.doctor.status": {
      "default": true,
      "markdownDescription": "%configuration.doctor.status%",
      "type": "boolean"
    },
    "vue.format.script.initialIndent": {
      "default": false,
      "markdownDescription": "%configuration.format.script.initialIndent%",
      "type": "boolean"
    },
    "vue.format.style.initialIndent": {
      "default": false,
      "markdownDescription": "%configuration.format.style.initialIndent%",
      "type": "boolean"
    },
    "vue.format.template.initialIndent": {
      "default": true,
      "markdownDescription": "%configuration.format.template.initialIndent%",
      "type": "boolean"
    },
    "vue.format.wrapAttributes": {
      "default": "auto",
      "enum": [
        "auto",
        "force",
        "force-aligned",
        "force-expand-multiline",
        "aligned-multiple",
        "preserve",
        "preserve-aligned"
      ],
      "markdownDescription": "%configuration.format.wrapAttributes%",
      "type": "string"
    },
    "vue.inlayHints.destructuredProps": {
      "default": false,
      "markdownDescription": "%configuration.inlayHints.destructuredProps%",
      "type": "boolean"
    },
    "vue.inlayHints.inlineHandlerLeading": {
      "default": false,
      "markdownDescription": "%configuration.inlayHints.inlineHandlerLeading%",
      "type": "boolean"
    },
    "vue.inlayHints.missingProps": {
      "default": false,
      "markdownDescription": "%configuration.inlayHints.missingProps%",
      "type": "boolean"
    },
    "vue.inlayHints.optionsWrapper": {
      "default": false,
      "markdownDescription": "%configuration.inlayHints.optionsWrapper%",
      "type": "boolean"
    },
    "vue.inlayHints.vBindShorthand": {
      "default": false,
      "markdownDescription": "%configuration.inlayHints.vBindShorthand%",
      "type": "boolean"
    },
    "vue.server.includeLanguages": {
      "default": [
        "vue"
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "%configuration.server.includeLanguages%",
      "type": "array"
    },
    "vue.splitEditors.icon": {
      "default": false,
      "markdownDescription": "%configuration.splitEditors.icon%",
      "type": "boolean"
    },
    "vue.splitEditors.layout.left": {
      "default": [
        "script",
        "scriptSetup",
        "styles"
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "%configuration.splitEditors.layout.left%",
      "type": "array"
    },
    "vue.splitEditors.layout.right": {
      "default": [
        "template",
        "customBlocks"
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "%configuration.splitEditors.layout.right%",
      "type": "array"
    },
    "vue.trace.server": {
      "default": "off",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "markdownDescription": "%configuration.trace.server%",
      "scope": "window",
      "type": "string"
    }
  }
}
