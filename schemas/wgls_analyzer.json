{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "WGSL/WESL support for Visual Studio Code",
  "properties": {
    "wgsl-analyzer.assist.expressionFillDefault": {
      "default": "todo",
      "enum": [
        "todo",
        "default"
      ],
      "enumDescriptions": [
        "Fill missing expressions with a `todo` comment.",
        "Fill missing expressions with reasonable defaults."
      ],
      "markdownDescription": "Placeholder expression to use for missing expressions in assists.",
      "type": "string"
    },
    "wgsl-analyzer.assist.termSearch.fuel": {
      "default": 1800,
      "markdownDescription": "Term search fuel in \"units of work\" for assists (Defaults to 1800).",
      "minimum": 0,
      "type": "integer"
    },
    "wgsl-analyzer.cachePriming.enable": {
      "default": true,
      "markdownDescription": "Warm up caches on project load.",
      "type": "boolean"
    },
    "wgsl-analyzer.cachePriming.numThreads": {
      "anyOf": [
        {
          "maximum": 255,
          "minimum": 0,
          "type": "number"
        },
        {
          "enum": [
            "physical",
            "logical"
          ],
          "enumDescriptions": [
            "Use the number of physical cores",
            "Use the number of logical cores"
          ],
          "type": "string"
        }
      ],
      "default": "physical",
      "markdownDescription": "How many worker threads to handle priming caches. The default `0` means to pick automatically."
    },
    "wgsl-analyzer.completion.addSemicolonToUnit": {
      "default": true,
      "markdownDescription": "Whether to automatically add a semicolon when completing unit-returning functions.",
      "type": "boolean"
    },
    "wgsl-analyzer.completion.callable.snippets": {
      "default": "fill_arguments",
      "enum": [
        "fill_arguments",
        "add_parentheses",
        "none"
      ],
      "enumDescriptions": [
        "Add call parentheses and pre-fill arguments.",
        "Add call parentheses.",
        "Do no snippet completions for callables."
      ],
      "markdownDescription": "Whether to add parenthesis and argument snippets when completing function.",
      "type": "string"
    },
    "wgsl-analyzer.completion.fullFunctionSignatures.enable": {
      "default": false,
      "markdownDescription": "Whether to show full function/method signatures in completion docs.",
      "type": "boolean"
    },
    "wgsl-analyzer.completion.limit": {
      "default": null,
      "markdownDescription": "Maximum number of completions to return. If `null`, then there is no limit.",
      "minimum": 0,
      "type": [
        "null",
        "integer"
      ]
    },
    "wgsl-analyzer.completion.postfix.enable": {
      "default": true,
      "markdownDescription": "Whether to show postfix snippets like `if` and `not`.",
      "type": "boolean"
    },
    "wgsl-analyzer.completion.snippets.custom": {
      "default": {},
      "markdownDescription": "Custom completion snippets.",
      "type": "object"
    },
    "wgsl-analyzer.completion.termSearch.enable": {
      "default": false,
      "markdownDescription": "Whether to enable term search based snippets.",
      "type": "boolean"
    },
    "wgsl-analyzer.completion.termSearch.fuel": {
      "default": 1000,
      "markdownDescription": "Term search fuel in \"units of work\" for autocompletion (Defaults to 1000).",
      "minimum": 0,
      "type": "integer"
    },
    "wgsl-analyzer.customImports": {
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "markdownDescription": "`#import` directives in the flavor of [Bevy Engine](https://bevyengine.org)'s [shader preprocessor](https://bevyengine.org/news/bevy-0-6/#shader-imports). To use objects from an import, add `#import <name>` to your WGSL.",
      "type": "object"
    },
    "wgsl-analyzer.diagnostics.disabled": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "List of wgsl-analyzer diagnostics to disable.",
      "type": "array",
      "uniqueItems": true
    },
    "wgsl-analyzer.diagnostics.enable": {
      "default": true,
      "markdownDescription": "Whether to show native wgsl-analyzer diagnostics.",
      "type": "boolean"
    },
    "wgsl-analyzer.diagnostics.experimental.enable": {
      "default": false,
      "markdownDescription": "Whether to show experimental wgsl-analyzer diagnostics that might have more false positives than usual.",
      "type": "boolean"
    },
    "wgsl-analyzer.diagnostics.nagaParsingErrors": {
      "default": false,
      "description": "Controls whether to show naga's parsing errors.",
      "type": "boolean"
    },
    "wgsl-analyzer.diagnostics.nagaValidationErrors": {
      "default": true,
      "description": "Controls whether to show naga's validation errors.",
      "type": "boolean"
    },
    "wgsl-analyzer.diagnostics.nagaVersion": {
      "default": "0.22",
      "description": "Which version of naga to use for its diagnostics",
      "enum": [
        "0.14",
        "0.19",
        "0.22",
        "main"
      ],
      "type": "string"
    },
    "wgsl-analyzer.diagnostics.previewNagaOutput": {
      "default": false,
      "markdownDescription": "Whether to show the main part of the rendered Naga output of a diagnostic message.",
      "type": "boolean"
    },
    "wgsl-analyzer.diagnostics.styleLints.enable": {
      "default": false,
      "markdownDescription": "Whether to run additional style lints.",
      "type": "boolean"
    },
    "wgsl-analyzer.diagnostics.typeErrors": {
      "default": true,
      "description": "Controls whether to show type errors.",
      "type": "boolean"
    },
    "wgsl-analyzer.diagnostics.useNagaErrorCode": {
      "default": false,
      "markdownDescription": "Whether to show diagnostics using the original Naga error code. If this is false, all Naga diagnostics will have the code 'Naga(Click for full compiler diagnostics)'",
      "type": "boolean"
    },
    "wgsl-analyzer.diagnostics.warningsAsHint": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code and will not show up in the `Problems Panel`.",
      "type": "array"
    },
    "wgsl-analyzer.diagnostics.warningsAsInfo": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the `Problems Panel`.",
      "type": "array"
    },
    "wgsl-analyzer.files.exclude": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "These paths (file/directories) will be ignored by wgsl-analyzer. They are relative to the workspace root, and globs are not supported. You may also need to add the folders to Code's `files.watcherExclude`.",
      "type": "array"
    },
    "wgsl-analyzer.files.watcher": {
      "default": "client",
      "enum": [
        "client",
        "server"
      ],
      "enumDescriptions": [
        "Use the client (editor) to watch files for changes",
        "Use server-side file watching"
      ],
      "markdownDescription": "Controls file watching implementation.",
      "type": "string"
    },
    "wgsl-analyzer.highlightRelated.breakPoints.enable": {
      "default": true,
      "markdownDescription": "Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.",
      "type": "boolean"
    },
    "wgsl-analyzer.highlightRelated.exitPoints.enable": {
      "default": true,
      "markdownDescription": "Enables highlighting of all exit points while the cursor is on any `return`, `fn`, or return type arrow (`->`).",
      "type": "boolean"
    },
    "wgsl-analyzer.highlightRelated.references.enable": {
      "default": true,
      "markdownDescription": "Enables highlighting of related references while the cursor is on any identifier.",
      "type": "boolean"
    },
    "wgsl-analyzer.hover.actions.enable": {
      "default": true,
      "markdownDescription": "Whether to show hover actions.",
      "type": "boolean"
    },
    "wgsl-analyzer.hover.actions.gotoTypeDef.enable": {
      "default": true,
      "markdownDescription": "Whether to show `Go to Type Definition` action. Only applies when `#wgsl-analyzer.hover.actions.enable#` is set.",
      "type": "boolean"
    },
    "wgsl-analyzer.hover.actions.implementations.enable": {
      "default": true,
      "markdownDescription": "Whether to show `Implementations` action. Only applies when `#wgsl-analyzer.hover.actions.enable#` is set.",
      "type": "boolean"
    },
    "wgsl-analyzer.hover.actions.references.enable": {
      "default": false,
      "markdownDescription": "Whether to show `References` action. Only applies when `#wgsl-analyzer.hover.actions.enable#` is set.",
      "type": "boolean"
    },
    "wgsl-analyzer.hover.documentation.enable": {
      "default": true,
      "markdownDescription": "Whether to show documentation on hover.",
      "type": "boolean"
    },
    "wgsl-analyzer.hover.documentation.keywords.enable": {
      "default": true,
      "markdownDescription": "Whether to show keyword hover popups. Only applies when `#wgsl-analyzer.hover.documentation.enable#` is set.",
      "type": "boolean"
    },
    "wgsl-analyzer.hover.links.enable": {
      "default": true,
      "markdownDescription": "Use markdown syntax for links on hover.",
      "type": "boolean"
    },
    "wgsl-analyzer.hover.memoryLayout.alignment": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "enum": [
            "both",
            "decimal",
            "hexadecimal"
          ],
          "enumDescriptions": [
            "Render as 12 (0xC)",
            "Render as 12",
            "Render as 0xC"
          ],
          "type": "string"
        }
      ],
      "default": "hexadecimal",
      "markdownDescription": "How to render the align information in a memory layout hover."
    },
    "wgsl-analyzer.hover.memoryLayout.enable": {
      "default": true,
      "markdownDescription": "Whether to show memory layout data on hover.",
      "type": "boolean"
    },
    "wgsl-analyzer.hover.memoryLayout.niches": {
      "default": false,
      "markdownDescription": "How to render the niche information in a memory layout hover.",
      "type": [
        "null",
        "boolean"
      ]
    },
    "wgsl-analyzer.hover.memoryLayout.offset": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "enum": [
            "both",
            "decimal",
            "hexadecimal"
          ],
          "enumDescriptions": [
            "Render as 12 (0xC)",
            "Render as 12",
            "Render as 0xC"
          ],
          "type": "string"
        }
      ],
      "default": "hexadecimal",
      "markdownDescription": "How to render the offset information in a memory layout hover."
    },
    "wgsl-analyzer.hover.memoryLayout.size": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "enum": [
            "both",
            "decimal",
            "hexadecimal"
          ],
          "enumDescriptions": [
            "Render as 12 (0xC)",
            "Render as 12",
            "Render as 0xC"
          ],
          "type": "string"
        }
      ],
      "default": "both",
      "markdownDescription": "How to render the size information in a memory layout hover."
    },
    "wgsl-analyzer.hover.show.fields": {
      "default": 5,
      "markdownDescription": "How many fields of a struct to display when hovering thereover. Show none if empty.",
      "minimum": 0,
      "type": [
        "null",
        "integer"
      ]
    },
    "wgsl-analyzer.imports.granularity.enforce": {
      "default": false,
      "markdownDescription": "Whether to enforce the import granularity setting for all files. If set to false wgsl-analyzer will try to keep import styles consistent per file.",
      "type": "boolean"
    },
    "wgsl-analyzer.imports.granularity.group": {
      "default": "package",
      "enum": [
        "preserve",
        "package",
        "module",
        "item",
        "one"
      ],
      "enumDescriptions": [
        "Do not change the granularity of any imports and preserve the original structure written by the developer.",
        "Merge imports from the same package into a single import statement. Conversely, imports from different packages are split into separate statements.",
        "Merge imports from the same module into a single import statement. Conversely, imports from different modules are split into separate statements.",
        "Flatten imports so that each has its own import statement.",
        "Merge all imports into a single import statement as long as they have the same visibility and attributes."
      ],
      "markdownDescription": "How imports should be grouped into import statements.",
      "type": "string"
    },
    "wgsl-analyzer.imports.group.enable": {
      "default": true,
      "markdownDescription": "Group inserted imports by the [following order](https://wgsl-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.",
      "type": "boolean"
    },
    "wgsl-analyzer.imports.merge.glob": {
      "default": true,
      "markdownDescription": "Whether to allow import insertion to merge new imports into single path glob imports like `import x::y::*;`.",
      "type": "boolean"
    },
    "wgsl-analyzer.initializeStopped": {
      "default": false,
      "markdownDescription": "Do not start wgsl-analyzer server when the extension is activated.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.bindingModeHints.enable": {
      "default": false,
      "markdownDescription": "Whether to show inlay type hints for binding modes.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.closingBraceHints.enable": {
      "default": true,
      "markdownDescription": "Whether to show inlay hints after a closing `}` to indicate what item it belongs to.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.closingBraceHints.minLines": {
      "default": 25,
      "markdownDescription": "Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1 to always show them).",
      "minimum": 0,
      "type": "integer"
    },
    "wgsl-analyzer.inlayHints.enabled": {
      "default": true,
      "description": "Whether to show inlay hints",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.expressionAdjustmentHints.mode": {
      "default": "prefix",
      "enum": [
        "prefix",
        "postfix",
        "prefer_prefix",
        "prefer_postfix"
      ],
      "enumDescriptions": [
        "Always show adjustment hints as prefix (`*expr`).",
        "Always show adjustment hints as postfix (`expr.*`).",
        "Show prefix or postfix depending on which uses less parenthesis, preferring prefix.",
        "Show prefix or postfix depending on which uses less parenthesis, preferring postfix."
      ],
      "markdownDescription": "Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).",
      "type": "string"
    },
    "wgsl-analyzer.inlayHints.genericParameterHints.const.enable": {
      "default": true,
      "markdownDescription": "Whether to show const generic parameter name inlay hints.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.genericParameterHints.lifetime.enable": {
      "default": false,
      "markdownDescription": "Whether to show generic lifetime parameter name inlay hints.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.genericParameterHints.type.enable": {
      "default": false,
      "markdownDescription": "Whether to show generic type parameter name inlay hints.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.implicitDrops.enable": {
      "default": false,
      "markdownDescription": "Whether to show implicit drop hints.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.implicitSizedBoundHints.enable": {
      "default": false,
      "markdownDescription": "Whether to show inlay hints for the implied type parameter `Sized` bound.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.lifetimeElisionHints.enable": {
      "default": "never",
      "enum": [
        "always",
        "never",
        "skip_trivial"
      ],
      "enumDescriptions": [
        "Always show lifetime elision hints.",
        "Never show lifetime elision hints.",
        "Only show lifetime elision hints if a return type is involved."
      ],
      "markdownDescription": "Whether to show inlay type hints for elided lifetimes in function signatures.",
      "type": "string"
    },
    "wgsl-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": {
      "default": false,
      "markdownDescription": "Whether to prefer using parameter names as the name for elided lifetime hints if possible.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.maxLength": {
      "default": 25,
      "markdownDescription": "Maximum length for inlay hints. Set to null to have an unlimited length.",
      "minimum": 0,
      "type": [
        "null",
        "integer"
      ]
    },
    "wgsl-analyzer.inlayHints.parameterHints": {
      "default": true,
      "description": "Whether to show inlay hints for the names of function parameters",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.parameterHints.enable": {
      "default": true,
      "markdownDescription": "Whether to show function parameter name inlay hints at the call site.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.rangeExclusiveHints.enable": {
      "default": false,
      "markdownDescription": "Whether to show exclusive range inlay hints.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.renderColons": {
      "default": true,
      "markdownDescription": "Whether to render leading colons for type hints, and trailing colons for parameter hints.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.structLayoutHints": {
      "default": false,
      "description": "Whether to show inlay hints for the layout of struct fields",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.typeHints": {
      "default": true,
      "description": "Whether to show inlay hints for types of variable declarations",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.typeHints.enable": {
      "default": true,
      "markdownDescription": "Whether to show inlay type hints for variables.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.typeHints.hideNamedConstructor": {
      "default": false,
      "markdownDescription": "Whether to hide inlay type hints for constructors.",
      "type": "boolean"
    },
    "wgsl-analyzer.inlayHints.typeVerbosity": {
      "default": "compact",
      "enum": [
        "full",
        "compact",
        "inner"
      ],
      "enumDescriptions": [
        "e.g. ref<uniform, f32, read_write>",
        "e.g. ref<f32>",
        "e.g. f32"
      ],
      "type": "string"
    },
    "wgsl-analyzer.joinLines.joinAssignments": {
      "default": true,
      "markdownDescription": "Join lines merges consecutive declaration and initialization of an assignment.",
      "type": "boolean"
    },
    "wgsl-analyzer.joinLines.joinElseIf": {
      "default": true,
      "markdownDescription": "Join lines inserts else between consecutive ifs.",
      "type": "boolean"
    },
    "wgsl-analyzer.joinLines.removeTrailingComma": {
      "default": true,
      "markdownDescription": "Join lines removes trailing commas.",
      "type": "boolean"
    },
    "wgsl-analyzer.joinLines.unwrapTrivialBlock": {
      "default": true,
      "markdownDescription": "Join lines unwraps trivial blocks.",
      "type": "boolean"
    },
    "wgsl-analyzer.lens.enable": {
      "default": true,
      "markdownDescription": "Whether to show CodeLens.",
      "type": "boolean"
    },
    "wgsl-analyzer.lens.implementations.enable": {
      "default": true,
      "markdownDescription": "Whether to show `Implementations` lens. Only applies when `#wgsl-analyzer.lens.enable#` is set.",
      "type": "boolean"
    },
    "wgsl-analyzer.lens.location": {
      "default": "above_name",
      "enum": [
        "above_name",
        "above_whole_item"
      ],
      "enumDescriptions": [
        "Render annotations above the name of the item.",
        "Render annotations above the whole item, including documentation comments and attributes."
      ],
      "markdownDescription": "Where to render annotations.",
      "type": "string"
    },
    "wgsl-analyzer.lens.references.adt.enable": {
      "default": false,
      "markdownDescription": "Whether to show `References` lens for Struct declarations.\nOnly applies when `#wgsl-analyzer.lens.enable#` is set.",
      "type": "boolean"
    },
    "wgsl-analyzer.lens.references.method.enable": {
      "default": false,
      "markdownDescription": "Whether to show `Method References` lens. Only applies when `#wgsl-analyzer.lens.enable#` is set.",
      "type": "boolean"
    },
    "wgsl-analyzer.lens.run.enable": {
      "default": true,
      "markdownDescription": "Whether to show `Run` lens. Only applies when `#wgsl-analyzer.lens.enable#` is set.",
      "type": "boolean"
    },
    "wgsl-analyzer.linkedProjects": {
      "default": [],
      "items": {
        "type": [
          "string",
          "object"
        ]
      },
      "markdownDescription": "Disable project auto-discovery in favor of explicitly specified set of projects.\n\nElements must be paths pointing to `wesl.toml`, `.wgsl` files, or `.wesl` files (which will be treated as standalone files).",
      "type": "array"
    },
    "wgsl-analyzer.lru.capacity": {
      "default": null,
      "markdownDescription": "Number of syntax trees wgsl-analyzer keeps in memory. Defaults to 128.",
      "maximum": 65535,
      "minimum": 0,
      "type": [
        "null",
        "integer"
      ]
    },
    "wgsl-analyzer.lru.query.capacities": {
      "default": {},
      "markdownDescription": "Sets the LRU capacity of the specified queries.",
      "type": "object"
    },
    "wgsl-analyzer.numThreads": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "maximum": 255,
          "minimum": 0,
          "type": "number"
        },
        {
          "enum": [
            "physical",
            "logical"
          ],
          "enumDescriptions": [
            "Use the number of physical cores",
            "Use the number of logical cores"
          ],
          "type": "string"
        }
      ],
      "default": null,
      "markdownDescription": "How many worker threads in the main loop. The default `null` means to pick automatically."
    },
    "wgsl-analyzer.preprocessor.shaderDefs": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Shader defines used in `#ifdef` directives in the flavor of [Bevy Engine](https://bevyengine.org)'s [shader preprocessor](https://bevyengine.org/news/bevy-0-6/#shader-imports).",
      "type": "array"
    },
    "wgsl-analyzer.references.excludeImports": {
      "default": false,
      "markdownDescription": "Exclude imports from find-all-references.",
      "type": "boolean"
    },
    "wgsl-analyzer.restartServerOnConfigChange": {
      "default": false,
      "markdownDescription": "Whether to restart the server automatically when certain settings that require a restart are changed.",
      "type": "boolean"
    },
    "wgsl-analyzer.semanticHighlighting.doc.comment.inject.enable": {
      "default": true,
      "markdownDescription": "Inject additional highlighting into doc comments.\n\nWhen enabled, wgsl-analyzer will highlight WGSL/WESL source in doc comments as well as intra-doc links.",
      "type": "boolean"
    },
    "wgsl-analyzer.semanticHighlighting.nonStandardTokens": {
      "default": true,
      "markdownDescription": "Whether the server is allowed to emit non-standard tokens and modifiers.",
      "type": "boolean"
    },
    "wgsl-analyzer.semanticHighlighting.operator.enable": {
      "default": true,
      "markdownDescription": "Use semantic tokens for operators.\n\nWhen disabled, wgsl-analyzer will emit semantic tokens only for operator tokens when they are tagged with modifiers.",
      "type": "boolean"
    },
    "wgsl-analyzer.semanticHighlighting.operator.specialization.enable": {
      "default": false,
      "markdownDescription": "Use specialized semantic tokens for operators.\n\nWhen enabled, wgsl-analyzer will emit special token types for operator tokens instead of the generic `operator` token type.",
      "type": "boolean"
    },
    "wgsl-analyzer.semanticHighlighting.punctuation.enable": {
      "default": false,
      "markdownDescription": "Use semantic tokens for punctuation.\n\nWhen disabled, wgsl-analyzer will emit semantic tokens only for punctuation tokens when they are tagged with modifiers or have a special role.",
      "type": "boolean"
    },
    "wgsl-analyzer.semanticHighlighting.punctuation.specialization.enable": {
      "default": false,
      "markdownDescription": "Use specialized semantic tokens for punctuation.\n\nWhen enabled, wgsl-analyzer will emit special token types for punctuation tokens instead of the generic `punctuation` token type.",
      "type": "boolean"
    },
    "wgsl-analyzer.semanticHighlighting.strings.enable": {
      "default": true,
      "markdownDescription": "Use semantic tokens for strings.\n\nIn some editors (e.g. VS Code) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight their contents.",
      "type": "boolean"
    },
    "wgsl-analyzer.server.extraEnv": {
      "additionalProperties": {
        "type": [
          "string",
          "number"
        ]
      },
      "default": null,
      "markdownDescription": "Extra environment variables that will be passed to the wgsl-analyzer executable. Useful for passing e.g. `WA_LOG` for debugging.",
      "type": [
        "null",
        "object"
      ]
    },
    "wgsl-analyzer.server.path": {
      "default": null,
      "markdownDescription": "Path to wgsl-analyzer executable (points to bundled binary by default).",
      "scope": "machine-overridable",
      "type": [
        "null",
        "string"
      ]
    },
    "wgsl-analyzer.showDependenciesExplorer": {
      "default": true,
      "markdownDescription": "Whether to show the dependencies view.",
      "type": "boolean"
    },
    "wgsl-analyzer.showRequestFailedErrorNotification": {
      "default": true,
      "markdownDescription": "Whether to show error notifications for failing requests.",
      "type": "boolean"
    },
    "wgsl-analyzer.showSyntaxTree": {
      "default": false,
      "markdownDescription": "Whether to show the syntax tree view.",
      "type": "boolean"
    },
    "wgsl-analyzer.showUnlinkedFileNotification": {
      "default": true,
      "markdownDescription": "Whether to show a notification for unlinked files asking the user to add the corresponding `wesl.toml` to the linked projects setting.",
      "type": "boolean"
    },
    "wgsl-analyzer.signatureInfo.detail": {
      "default": "full",
      "enum": [
        "full",
        "parameters"
      ],
      "enumDescriptions": [
        "Show the entire signature.",
        "Show only the parameters."
      ],
      "markdownDescription": "Show full signature of the callable. Only shows parameters if disabled.",
      "type": "string"
    },
    "wgsl-analyzer.signatureInfo.documentation.enable": {
      "default": true,
      "markdownDescription": "Show documentation.",
      "type": "boolean"
    },
    "wgsl-analyzer.statusBar.clickAction": {
      "default": "openLogs",
      "enum": [
        "stopServer",
        "openLogs"
      ],
      "enumDescriptions": [
        "Stop Server",
        "Open Logs"
      ],
      "markdownDescription": "Action to run when clicking the extension status bar item.",
      "type": "string"
    },
    "wgsl-analyzer.statusBar.showStatusBar": {
      "anyOf": [
        {
          "enum": [
            "always",
            "never"
          ],
          "type": "string"
        },
        {
          "properties": {
            "documentSelector": {
              "items": {
                "properties": {
                  "language": {
                    "type": "string"
                  },
                  "notebookType": {
                    "type": "string"
                  },
                  "pattern": {
                    "type": "string"
                  },
                  "scheme": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "default": {
        "documentSelector": [
          {
            "language": "wgsl"
          },
          {
            "language": "wesl"
          },
          {
            "pattern": "**/wesl.toml"
          },
          {
            "pattern": "extension-output-wgsl-analyzer.wgsl-analyzer*",
            "scheme": "output"
          }
        ]
      },
      "markdownDescription": "When to show the extension status bar.\n\n`\"always\"` Always show the status bar.\n\n`\"never\"` Never show the status bar.\n\n`{ documentSelector: <DocumentSelector>[] }` Show the status bar if the open file matches any of the given document selectors.\n\nSee [VS Code -- DocumentSelector](https://code.visualstudio.com/api/references/document-selector) for more information."
    },
    "wgsl-analyzer.trace.extension": {
      "default": false,
      "description": "Enable logging of VS Code extensions itself.",
      "markdownDeprecationMessage": "Log level is now controlled by the [Developer: Set Log Level...](command:workbench.action.setLogLevel) command. You can set the log level for the current session and also the default log level from there. This is also available by clicking the gear icon on the OUTPUT tab when wgsl-analyzer Client is visible or by passing the --log wgsl-analyzer.wgsl-analyzer:debug parameter to VS Code.",
      "type": "boolean"
    },
    "wgsl-analyzer.trace.server": {
      "default": "off",
      "description": "Trace requests to the wgsl-analyzer (this is usually overly verbose and not recommended for regular users).",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "enumDescriptions": [
        "No traces",
        "Error only",
        "Full log"
      ],
      "scope": "window",
      "type": "string"
    },
    "wgsl-analyzer.typing.continueCommentsOnNewline": {
      "default": true,
      "markdownDescription": "Whether to prefix newlines after comments with the corresponding comment prefix.",
      "type": "boolean"
    },
    "wgsl-analyzer.typing.triggerChars": {
      "default": "=.",
      "markdownDescription": "Specify the characters allowed to invoke special on typing triggers.\n- typing `=` after `let` tries to smartly add `;` if `=` is followed by an existing expression\n- typing `=` between two expressions adds `;` when in statement position\n- typing `=` to turn an assignment into an equality comparison removes `;` when in expression position\n- typing `{` or `(` in front of an expression inserts a closing `}` or `)` after the expression\n- typing `{` in a use item adds a closing `}` in the right place\n- typing `>` to complete a return type `->` will insert a whitespace after it.",
      "type": [
        "null",
        "string"
      ]
    },
    "wgsl-analyzer.vfs.extraIncludes": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Additional paths to include in the virtual file system.",
      "type": "array"
    },
    "wgsl-analyzer.wgslfmt.extraArgs": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Additional arguments to `wgslfmt`.",
      "type": "array"
    },
    "wgsl-analyzer.wgslfmt.overrideCommand": {
      "default": null,
      "items": {
        "type": "string"
      },
      "markdownDescription": "Advanced option, fully override the command wgsl-analyzer uses for formatting. This should be the equivalent of `wgslfmt` here, and not that of `wesl fmt`. The file contents will be passed on the standard input and the formatted result will be read from the standard output.",
      "type": [
        "null",
        "array"
      ]
    },
    "wgsl-analyzer.wgslfmt.rangeFormatting.enable": {
      "default": false,
      "markdownDescription": "Enables the use of wgslfmt's unstable range formatting command for the `textDocument/rangeFormatting` request. The wgslfmt option is unstable.",
      "type": "boolean"
    },
    "wgsl-analyzer.workspace.symbol.search.kind": {
      "default": "only_types",
      "enum": [
        "only_types",
        "all_symbols"
      ],
      "enumDescriptions": [
        "Search for types only.",
        "Search for all symbols kinds."
      ],
      "markdownDescription": "Workspace symbol search kind.",
      "type": "string"
    },
    "wgsl-analyzer.workspace.symbol.search.limit": {
      "default": 128,
      "markdownDescription": "Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit.",
      "minimum": 0,
      "type": "integer"
    },
    "wgsl-analyzer.workspace.symbol.search.scope": {
      "default": "workspace",
      "enum": [
        "workspace",
        "workspace_and_dependencies"
      ],
      "enumDescriptions": [
        "Search in current workspace only.",
        "Search in current workspace and dependencies."
      ],
      "markdownDescription": "Workspace symbol search scope.",
      "type": "string"
    }
  }
}
