{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Integrates ESLint JavaScript into VS Code.",
  "properties": {
    "eslint.autoFixOnSave": {
      "default": false,
      "deprecationMessage": "The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.",
      "description": "Turns auto fix on save on or off.",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.codeAction.disableRuleComment": {
      "additionalProperties": false,
      "default": {
        "commentStyle": "line",
        "enable": true,
        "location": "separateLine"
      },
      "markdownDescription": "Show disable lint rule in the quick fix menu.",
      "properties": {
        "commentStyle": {
          "default": "line",
          "definition": "The comment style to use when disabling a rule on a specific line.",
          "enum": [
            "line",
            "block"
          ],
          "type": "string"
        },
        "enable": {
          "default": true,
          "description": "Show the disable code actions.",
          "type": "boolean"
        },
        "location": {
          "default": "separateLine",
          "description": "Configure the disable rule code action to insert the comment on the same line or a new line.",
          "enum": [
            "separateLine",
            "sameLine"
          ],
          "type": "string"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "eslint.codeAction.showDocumentation": {
      "additionalProperties": false,
      "default": {
        "enable": true
      },
      "markdownDescription": "Show open lint rule documentation web page in the quick fix menu.",
      "properties": {
        "enable": {
          "default": true,
          "description": "Show the documentation code actions.",
          "type": "boolean"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "eslint.codeActionsOnSave.mode": {
      "default": "all",
      "enum": [
        "all",
        "problems"
      ],
      "enumDescriptions": [
        "Fixes all possible problems in the file. This option might take some time.",
        "Fixes only reported problems that have non-overlapping textual edits. This option runs a lot faster."
      ],
      "markdownDescription": "Specifies the code action mode. Possible values are 'all' and 'problems'.",
      "scope": "resource",
      "type": "string"
    },
    "eslint.codeActionsOnSave.rules": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "markdownDescription": "The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration",
      "scope": "resource"
    },
    "eslint.debug": {
      "default": false,
      "markdownDescription": "Enables ESLint debug mode (same as `--debug` on the command line)",
      "scope": "window",
      "type": "boolean"
    },
    "eslint.enable": {
      "default": true,
      "description": "Controls whether eslint is enabled or not.",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.execArgv": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "markdownDescription": "Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size",
      "scope": "machine-overridable"
    },
    "eslint.experimental.useFlatConfig": {
      "default": false,
      "deprecationMessage": "Use ESLint version 8.57 or later and `eslint.useFlatConfig` instead.",
      "description": "Enables support of experimental Flat Config (aka eslint.config.js). Requires ESLint version >= 8.21 < 8.57.0).",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.format.enable": {
      "default": false,
      "description": "Enables ESLint as a formatter.",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.ignoreUntitled": {
      "default": false,
      "description": "If true, untitled files won't be validated by ESLint.",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.lintTask.enable": {
      "default": false,
      "description": "Controls whether a task for linting the whole workspace will be available.",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.lintTask.options": {
      "default": ".",
      "markdownDescription": "Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).",
      "scope": "resource",
      "type": "string"
    },
    "eslint.migration.2_x": {
      "default": "on",
      "description": "Whether ESlint should migrate auto fix on save settings.",
      "enum": [
        "off",
        "on"
      ],
      "scope": "application",
      "type": "string"
    },
    "eslint.nodeEnv": {
      "default": null,
      "markdownDescription": "The value of `NODE_ENV` to use when running eslint tasks.",
      "scope": "resource",
      "type": [
        "string",
        "null"
      ]
    },
    "eslint.nodePath": {
      "default": null,
      "markdownDescription": "A path added to `NODE_PATH` when resolving the eslint module.",
      "scope": "machine-overridable",
      "type": [
        "string",
        "null"
      ]
    },
    "eslint.notebooks.rules.customizations": {
      "description": "A special rules customization section for text cells in notebook documents.",
      "items": {
        "properties": {
          "rule": {
            "type": "string"
          },
          "severity": {
            "enum": [
              "downgrade",
              "error",
              "info",
              "default",
              "upgrade",
              "warn",
              "off"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "scope": "resource",
      "type": "array"
    },
    "eslint.onIgnoredFiles": {
      "default": "off",
      "description": "Whether ESLint should issue a warning on ignored files.",
      "enum": [
        "warn",
        "off"
      ],
      "scope": "resource",
      "type": "string"
    },
    "eslint.options": {
      "default": {},
      "markdownDescription": "The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).",
      "scope": "resource",
      "type": "object"
    },
    "eslint.packageManager": {
      "default": "npm",
      "deprecationMessage": "The setting is deprecated. The Package Manager is automatically detected now.",
      "description": "The package manager you use to install node modules.",
      "enum": [
        "npm",
        "yarn",
        "pnpm"
      ],
      "scope": "resource",
      "type": "string"
    },
    "eslint.probe": {
      "default": [
        "astro",
        "javascript",
        "javascriptreact",
        "typescript",
        "typescriptreact",
        "html",
        "mdx",
        "vue",
        "markdown",
        "json",
        "jsonc"
      ],
      "description": "An array of language ids for which the extension should probe if support is installed.",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "eslint.problems.shortenToSingleLine": {
      "default": false,
      "description": "Shortens the text spans of underlined problems to their first related line.",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.provideLintTask": {
      "default": false,
      "deprecationMessage": "This option is deprecated. Use eslint.lintTask.enable instead.",
      "description": "Controls whether a task for linting the whole workspace will be available.",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.quiet": {
      "default": false,
      "description": "Turns on quiet mode, which ignores warnings.",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.rules.customizations": {
      "description": "Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.",
      "items": {
        "properties": {
          "rule": {
            "type": "string"
          },
          "severity": {
            "enum": [
              "downgrade",
              "error",
              "info",
              "default",
              "upgrade",
              "warn",
              "off"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "scope": "resource",
      "type": "array"
    },
    "eslint.run": {
      "default": "onType",
      "description": "Run the linter on save (onSave) or on type (onType)",
      "enum": [
        "onSave",
        "onType"
      ],
      "scope": "resource",
      "type": "string"
    },
    "eslint.runtime": {
      "default": null,
      "markdownDescription": "The location of the node binary to run ESLint under.",
      "scope": "machine-overridable",
      "type": [
        "string",
        "null"
      ]
    },
    "eslint.timeBudget.onFixes": {
      "default": {
        "error": 6000,
        "warn": 3000
      },
      "markdownDescription": "The time budget in milliseconds to spend on computing fixes before showing a warning or error.",
      "properties": {
        "error": {
          "default": 6000,
          "markdownDescription": "The time budget in milliseconds to spend on computing fixes before showing an error.",
          "minimum": 0,
          "type": "number"
        },
        "warn": {
          "default": 3000,
          "markdownDescription": "The time budget in milliseconds to spend on computing fixes before showing a warning.",
          "minimum": 0,
          "type": "number"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "eslint.timeBudget.onValidation": {
      "default": {
        "error": 8000,
        "warn": 4000
      },
      "markdownDescription": "The time budget in milliseconds to spend on validation before showing a warning or error.",
      "properties": {
        "error": {
          "default": 8000,
          "markdownDescription": "The time budget in milliseconds to spend on validation before showing an error.",
          "minimum": 0,
          "type": "number"
        },
        "warn": {
          "default": 4000,
          "markdownDescription": "The time budget in milliseconds to spend on validation before showing a warning.",
          "minimum": 0,
          "type": "number"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "eslint.trace.server": {
      "anyOf": [
        {
          "default": "off",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "type": "string"
        },
        {
          "properties": {
            "format": {
              "default": "text",
              "enum": [
                "text",
                "json"
              ],
              "type": "string"
            },
            "verbosity": {
              "default": "off",
              "enum": [
                "off",
                "messages",
                "verbose"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "default": "off",
      "description": "Traces the communication between VSCode and the eslint linter service.",
      "scope": "window"
    },
    "eslint.useESLintClass": {
      "default": false,
      "description": "Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.",
      "scope": "resource",
      "type": "boolean"
    },
    "eslint.useFlatConfig": {
      "default": null,
      "markdownDescription": "Controls whether flat config should be used or not. This setting requires ESLint version 8.57 or later and is interpreted according to the [ESLint Flat Config rollout plan](https://eslint.org/blog/2023/10/flat-config-rollout-plans/). This means:\n\n - *8.57.0 <= ESLint version < 9.x*: setting is honored and defaults to false\n- *9.0.0 <= ESLint version < 10.x*: settings is honored and defaults to true\n- *10.0.0 <= ESLint version*: setting is ignored. Flat configs are the default and can't be turned off.",
      "scope": "resource",
      "type": [
        "boolean",
        "null"
      ]
    },
    "eslint.validate": {
      "default": null,
      "description": "An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.",
      "items": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "deprecationMessage": "Auto Fix is enabled by default. Use the single string form.",
            "properties": {
              "autoFix": {
                "description": "Whether auto fixes are provided for the language.",
                "type": "boolean"
              },
              "language": {
                "description": "The language id to be validated by ESLint.",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "scope": "resource",
      "type": [
        "array",
        "null"
      ]
    },
    "eslint.workingDirectories": {
      "items": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "properties": {
              "mode": {
                "default": "location",
                "enum": [
                  "auto",
                  "location"
                ],
                "type": "string"
              }
            },
            "required": [
              "mode"
            ],
            "type": "object"
          },
          {
            "deprecationMessage": "Use the new !cwd form.",
            "properties": {
              "changeProcessCWD": {
                "description": "Whether the process's cwd should be changed as well.",
                "type": "boolean"
              },
              "directory": {
                "description": "The working directory to use if a file's path starts with this directory.",
                "type": "string"
              }
            },
            "required": [
              "directory"
            ],
            "type": "object"
          },
          {
            "properties": {
              "!cwd": {
                "description": "Set to true if ESLint shouldn't change the working directory.",
                "type": "boolean"
              },
              "directory": {
                "description": "The working directory to use if a file's path starts with this directory.",
                "type": "string"
              }
            },
            "required": [
              "directory"
            ],
            "type": "object"
          },
          {
            "properties": {
              "!cwd": {
                "description": "Set to true if ESLint shouldn't change the working directory.",
                "type": "boolean"
              },
              "pattern": {
                "description": "A glob pattern to match a working directory.",
                "type": "string"
              }
            },
            "required": [
              "pattern"
            ],
            "type": "object"
          }
        ]
      },
      "markdownDescription": "Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.",
      "scope": "resource",
      "type": "array"
    }
  }
}
