{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Code completion, debugging, linting and more",
  "properties": {
    "kotlin.codegen.enabled": {
      "default": false,
      "description": "Whether to enable code generation to a temporary build output directory for Java interoperability (via the non-standard kotlin/buildOutputLocation LSP method). Experimental.",
      "type": "boolean"
    },
    "kotlin.compiler.jvm.target": {
      "default": "default",
      "description": "Specifies the JVM target, e.g. \"1.6\" or \"1.8\"",
      "type": "string"
    },
    "kotlin.completion.snippets.enabled": {
      "default": true,
      "description": "Specifies whether code completion should provide snippets (true) or plain-text items (false).",
      "type": "boolean"
    },
    "kotlin.debounceTime": {
      "default": 250,
      "deprecationMessage": "Use 'kotlin.linting.debounceTime' instead",
      "description": "[DEPRECATED] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues.",
      "type": "integer"
    },
    "kotlin.debugAdapter.enabled": {
      "default": true,
      "description": "[Recommended] Specifies whether the debug adapter should be used. When enabled a debugger for Kotlin will be available.",
      "type": "boolean"
    },
    "kotlin.debugAdapter.path": {
      "default": "",
      "description": "Optionally a custom path to the debug adapter executable.",
      "type": "string"
    },
    "kotlin.diagnostics.debounceTime": {
      "default": 250,
      "description": "[DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues.",
      "type": "integer"
    },
    "kotlin.diagnostics.enabled": {
      "default": true,
      "description": "Whether diagnostics (e.g. errors or warnings from the Kotlin compiler) should be emitted.",
      "type": "boolean"
    },
    "kotlin.diagnostics.level": {
      "default": "hint",
      "description": "The minimum severity of diagnostics to emit.",
      "enum": [
        "error",
        "warning",
        "information",
        "hint"
      ],
      "type": "string"
    },
    "kotlin.externalSources.autoConvertToKotlin": {
      "default": false,
      "description": "Specifies whether decompiled/external classes should be auto-converted to Kotlin.",
      "type": "boolean"
    },
    "kotlin.externalSources.useKlsScheme": {
      "default": true,
      "description": "[Recommended] Specifies whether URIs inside JARs should be represented using the 'kls'-scheme.",
      "type": "boolean"
    },
    "kotlin.indexing.enabled": {
      "default": true,
      "description": "Whether global symbols in the project should be indexed automatically in the background. This enables e.g. code completion for unimported classes and functions.",
      "type": "boolean"
    },
    "kotlin.inlayHints.chainedHints": {
      "default": false,
      "description": "Whether to provide inlay hints on chained function calls or not.",
      "type": "boolean"
    },
    "kotlin.inlayHints.parameterHints": {
      "default": false,
      "description": "Whether to provide inlay hints for parameters on call sites or not.",
      "type": "boolean"
    },
    "kotlin.inlayHints.typeHints": {
      "default": false,
      "description": "Whether to provide inlay hints for types on declaration sites or not.",
      "type": "boolean"
    },
    "kotlin.java.home": {
      "default": "",
      "description": "A custom JAVA_HOME for the language server and debug adapter to use.",
      "type": "string"
    },
    "kotlin.java.opts": {
      "default": "",
      "description": "Custom options using JAVA_OPTS for the language server and debug adapter.",
      "type": "string"
    },
    "kotlin.languageServer.debugAttach.autoSuspend": {
      "default": false,
      "description": "[DEBUG] If enabled (together with debugAttach.enabled), the language server will not immediately launch but instead listen on the specified attach port and wait for a debugger. This is ONLY useful if you need to debug the language server ITSELF.",
      "type": "boolean"
    },
    "kotlin.languageServer.debugAttach.enabled": {
      "default": false,
      "description": "[DEBUG] Whether the language server should listen for debuggers, i.e. be debuggable while running in VSCode. This is ONLY useful if you need to debug the language server ITSELF.",
      "type": "boolean"
    },
    "kotlin.languageServer.debugAttach.port": {
      "default": 5005,
      "description": "[DEBUG] If transport is stdio this enables you to attach to the running language server with a debugger. This is ONLY useful if you need to debug the language server ITSELF.",
      "type": "integer"
    },
    "kotlin.languageServer.enabled": {
      "default": true,
      "description": "[Recommended] Specifies whether the language server should be used. When enabled the extension will provide code completions and linting, otherwise just syntax highlighting. Might require a reload to apply.",
      "type": "boolean"
    },
    "kotlin.languageServer.path": {
      "default": "",
      "description": "Optionally a custom path to the language server executable.",
      "type": "string"
    },
    "kotlin.languageServer.port": {
      "default": 0,
      "description": "The port to which the client will attempt to connect to. A random port is used if zero. Only used if the transport layer is TCP.",
      "type": "integer"
    },
    "kotlin.languageServer.transport": {
      "default": "stdio",
      "description": "The transport layer beneath the language server protocol. Note that the extension will launch the server even if a TCP socket is used.",
      "enum": [
        "stdio",
        "tcp"
      ],
      "type": "string"
    },
    "kotlin.languageServer.watchFiles": {
      "default": [
        "**/*.kt",
        "**/*.kts",
        "**/*.java",
        "**/pom.xml",
        "**/build.gradle",
        "**/settings.gradle"
      ],
      "description": "Specifies glob patterns of files, which would be watched by LSP client. The LSP client doesn't support watching files outside a workspace folder.",
      "type": "array"
    },
    "kotlin.linting.debounceTime": {
      "default": 250,
      "deprecationMessage": "The option has been renamed to `kotlin.diagnostics.debounceTime`",
      "description": "[DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues.",
      "type": "integer"
    },
    "kotlin.scripts.buildScriptsEnabled": {
      "default": false,
      "description": "Whether language features are provided for .gradle.kts scripts. Experimental and may not work properly.",
      "type": "boolean"
    },
    "kotlin.scripts.enabled": {
      "default": false,
      "description": "Whether language features are provided for .kts scripts. Experimental and may not work properly.",
      "type": "boolean"
    },
    "kotlin.snippetsEnabled": {
      "default": true,
      "deprecationMessage": "Use 'kotlin.completion.snippets.enabled'",
      "description": "[DEPRECATED] Specifies whether code completion should provide snippets (true) or plain-text items (false).",
      "type": "boolean"
    },
    "kotlin.trace.server": {
      "default": "off",
      "description": "Traces the communication between VSCode and the Kotlin language server.",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "scope": "window",
      "type": "string"
    }
  }
}
