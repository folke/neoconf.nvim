{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "A language server client for Deno.",
  "properties": {
    "deno.cache": {
      "default": null,
      "markdownDescription": "A path to the cache directory for Deno. By default, the operating system's cache path plus `deno` is used, or the `DENO_DIR` environment variable, but if set, this path will be used instead.",
      "scope": "window",
      "type": "string"
    },
    "deno.cacheOnSave": {
      "default": false,
      "examples": [
        true,
        false
      ],
      "markdownDescription": "Controls if the extension should cache the active document's dependencies on save.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.certificateStores": {
      "default": null,
      "items": {
        "type": "string"
      },
      "markdownDescription": "A list of root certificate stores used to validate TLS certificates when fetching and caching remote resources. This overrides the `DENO_TLS_CA_STORE` environment variable if set.",
      "scope": "window",
      "type": "array"
    },
    "deno.codeLens.implementations": {
      "default": false,
      "examples": [
        true,
        false
      ],
      "markdownDescription": "Enables or disables the display of code lens information for implementations of items in the code.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.codeLens.references": {
      "default": false,
      "examples": [
        true,
        false
      ],
      "markdownDescription": "Enables or disables the display of code lens information for references of items in the code.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.codeLens.referencesAllFunctions": {
      "default": false,
      "examples": [
        true,
        false
      ],
      "markdownDescription": "Enables or disables the display of code lens information for all functions in the code.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.codeLens.test": {
      "default": false,
      "markdownDescription": "Enables or disables the display of code lenses that allow running of individual tests in the code.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.codeLens.testArgs": {
      "default": [
        "--allow-all",
        "--no-check"
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Additional arguments to use with the run test code lens.  Defaults to `[ \"--allow-all\", \"--no-check\" ]`.",
      "scope": "resource",
      "type": "array"
    },
    "deno.config": {
      "default": null,
      "examples": [
        "./deno.jsonc",
        "/path/to/deno.jsonc",
        "C:\\path\\to\\deno.jsonc"
      ],
      "markdownDescription": "The file path to a configuration file. This is the equivalent to using `--config` on the command line. The path can be either be relative to the workspace, or an absolute path.\n\nIt is recommend you name it `deno.json` or `deno.jsonc`.\n\n**Not recommended to be set globally.**",
      "scope": "resource",
      "type": "string"
    },
    "deno.defaultTaskCommand": {
      "default": "open",
      "enum": [
        "open",
        "run"
      ],
      "markdownDescription": "Controls the default action when clicking on a task in the _Deno Tasks sidebar_.",
      "scope": "resource",
      "type": "string"
    },
    "deno.disablePaths": {
      "default": [],
      "examples": [
        [
          "./worker"
        ]
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Disables the Deno Language Server for specific paths. This will leave the built in TypeScript/JavaScript language server enabled for those paths. Takes priority over `deno.enablePaths`.\n\n**Not recommended to be enabled in user settings.**",
      "scope": "resource",
      "type": "array"
    },
    "deno.documentPreloadLimit": {
      "default": 1000,
      "examples": [
        0,
        100,
        1000
      ],
      "markdownDescription": "Maximum number of file system entries to traverse when finding scripts to preload into TypeScript on startup. Set this to 0 to disable document preloading.",
      "scope": "resource",
      "type": "number"
    },
    "deno.enable": {
      "default": null,
      "examples": [
        true,
        false
      ],
      "markdownDescription": "Controls if the Deno Language Server is enabled. When enabled, the extension will disable the built-in VSCode JavaScript and TypeScript language services, and will use the Deno Language Server instead.\n\nIf omitted, your preference will be inferred as true if there is a `deno.json[c]` at your workspace root and false if not.\n\nIf you want to enable only part of your workspace folder, consider using `deno.enablePaths` setting instead.\n\n**Not recommended to be enabled globally.**",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.enablePaths": {
      "default": [],
      "examples": [
        [
          "./worker"
        ]
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Enables the Deno Language Server for specific paths, instead of for the whole workspace folder. This will disable the built in TypeScript/JavaScript language server for those paths.\n\nWhen a value is set, the value of `\"deno.enable\"` is ignored.\n\nThe workspace folder is used as the base for the supplied paths. If for example you have all your Deno code in `worker` path in your workspace, you can add an item with the value of `./worker`, and the Deno will only provide diagnostics for the files within `worker` or any of its sub paths.\n\n**Not recommended to be enabled in user settings.**",
      "scope": "resource",
      "type": "array"
    },
    "deno.importMap": {
      "default": null,
      "examples": [
        "./import_map.json",
        "/path/to/import_map.json",
        "C:\\path\\to\\import_map.json"
      ],
      "markdownDescription": "The file path to an import map. This is the equivalent to using `--import-map` on the command line.\n\n[Import maps](https://deno.land/manual@v1.6.0/linking_to_external_code/import_maps) provide a way to \"relocate\" modules based on their specifiers. The path can either be relative to the workspace, or an absolute path.\n\n**Not recommended to be set globally.**",
      "scope": "resource",
      "type": "string"
    },
    "deno.inlayHints.enumMemberValues.enabled": {
      "default": false,
      "deprecationMessage": "Use `typescript.inlayHints.enumMemberValues.enabled` and `javascript.inlayHints.enumMemberValues.enabled`.",
      "markdownDescription": "Enable/disable inlay hints for enum values.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.inlayHints.functionLikeReturnTypes.enabled": {
      "default": false,
      "deprecationMessage": "Use `typescript.inlayHints.functionLikeReturnTypes.enabled` and `javascript.inlayHints.functionLikeReturnTypes.enabled`.",
      "markdownDescription": "Enable/disable inlay hints for implicit function return types.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.inlayHints.parameterNames.enabled": {
      "default": "none",
      "deprecationMessage": "Use `typescript.inlayHints.parameterNames.enabled` and `javascript.inlayHints.parameterNames.enabled`.",
      "enum": [
        "none",
        "literals",
        "all"
      ],
      "enumDescriptions": [
        "Disable inlay hints for parameters.",
        "Display inlay hints for literal arguments.",
        "Display inlay hints for all literal and non-literal arguments."
      ],
      "markdownDescription": "Enable/disable inlay hints for parameter names.",
      "scope": "resource",
      "type": "string"
    },
    "deno.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
      "default": true,
      "deprecationMessage": "Use `typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName` and `javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName`.",
      "markdownDescription": "Do not display an inlay hint when the argument name matches the parameter.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.inlayHints.parameterTypes.enabled": {
      "default": false,
      "deprecationMessage": "Use `typescript.inlayHints.parameterTypes.enabled` and `javascript.inlayHints.parameterTypes.enabled`.",
      "markdownDescription": "Enable/disable inlay hints for implicit parameter types.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.inlayHints.propertyDeclarationTypes.enabled": {
      "default": false,
      "deprecationMessage": "Use `typescript.inlayHints.propertyDeclarationTypes.enabled` and `javascript.inlayHints.propertyDeclarationTypes.enabled`.",
      "markdownDescription": "Enable/disable inlay hints for implicit property declarations.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.inlayHints.variableTypes.enabled": {
      "default": false,
      "deprecationMessage": "Use `typescript.inlayHints.variableTypes.enabled` and `javascript.inlayHints.variableTypes.enabled`.",
      "markdownDescription": "Enable/disable inlay hints for implicit variable types.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.inlayHints.variableTypes.suppressWhenTypeMatchesName": {
      "default": true,
      "deprecationMessage": "Use `typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName` and `javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName`.",
      "markdownDescription": "Suppress type hints where the variable name matches the implicit type.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.internalDebug": {
      "default": false,
      "examples": [
        true,
        false
      ],
      "markdownDescription": "Determines if the internal debugging information for the Deno language server will be logged to the _Deno Language Server_ console.",
      "scope": "window",
      "type": "boolean"
    },
    "deno.lint": {
      "default": true,
      "examples": [
        true,
        false
      ],
      "markdownDescription": "Controls if linting information will be provided by the Deno Language Server.\n\n**Not recommended to be enabled globally.**",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.maxTsServerMemory": {
      "default": 3072,
      "markdownDescription": "Maximum amount of memory the TypeScript isolate can use. Defaults to 3072 (3GB).",
      "scope": "resource",
      "type": "number"
    },
    "deno.path": {
      "default": null,
      "examples": [
        "/usr/bin/deno",
        "C:\\Program Files\\deno\\deno.exe"
      ],
      "markdownDescription": "A path to the `deno` CLI executable. By default, the extension looks for `deno` in the `PATH`, but if set, will use the path specified instead.",
      "scope": "window",
      "type": "string"
    },
    "deno.suggest.autoImports": {
      "default": true,
      "deprecationMessage": "Use `typescript.suggest.autoImports` and `javascript.suggest.autoImports`.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.suggest.completeFunctionCalls": {
      "default": false,
      "deprecationMessage": "Use `typescript.suggest.completeFunctionCalls` and `javascript.suggest.completeFunctionCalls`.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.suggest.imports.autoDiscover": {
      "default": true,
      "markdownDescription": "If enabled, when new hosts/origins are encountered that support import suggestions, you will be prompted to enable or disable it.  Defaults to `true`.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.suggest.imports.hosts": {
      "default": {
        "https://deno.land": true
      },
      "examples": {
        "https://deno.land": true
      },
      "markdownDescription": "Controls which hosts are enabled for import suggestions.",
      "scope": "resource",
      "type": "object"
    },
    "deno.suggest.names": {
      "default": true,
      "deprecationMessage": "Use `typescript.suggest.names` and `javascript.suggest.names`.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.suggest.paths": {
      "default": true,
      "deprecationMessage": "Use `typescript.suggest.paths` and `javascript.suggest.paths`.",
      "scope": "resource",
      "type": "boolean"
    },
    "deno.testing.args": {
      "default": [
        "--allow-all",
        "--no-check"
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Arguments to use when running tests via the Test Explorer.  Defaults to `[ \"--allow-all\" ]`.",
      "scope": "resource",
      "type": "array"
    },
    "deno.tlsCertificate": {
      "default": null,
      "markdownDescription": "A path to a PEM certificate to use as the certificate authority when validating TLS certificates when fetching and caching remote resources. This is like using `--cert` on the Deno CLI and overrides the `DENO_CERT` environment variable if set.",
      "scope": "window",
      "type": "string"
    },
    "deno.unsafelyIgnoreCertificateErrors": {
      "default": null,
      "items": {
        "type": "string"
      },
      "markdownDescription": "**DANGER** disables verification of TLS certificates for the hosts provided. There is likely a better way to deal with any errors than use this option. This is like using `--unsafely-ignore-certificate-errors` in the Deno CLI.",
      "scope": "window",
      "type": "array"
    },
    "deno.unstable": {
      "default": false,
      "examples": [
        true,
        false
      ],
      "markdownDescription": "Controls if code will be type checked with Deno's unstable APIs. This is the equivalent to using `--unstable` on the command line.\n\n**Not recommended to be enabled globally.**",
      "scope": "resource",
      "type": "boolean"
    }
  }
}
