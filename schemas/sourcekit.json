{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Swift Language Support for Visual Studio Code.",
  "properties": {
    "sourcekit-lsp.disable": {
      "default": false,
      "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.disable#` instead.",
      "markdownDescription": "Disable the running of SourceKit-LSP.",
      "type": "boolean"
    },
    "sourcekit-lsp.inlayHints.enabled": {
      "default": true,
      "markdownDeprecationMessage": "**Deprecated**: Please use `#editor.inlayHints.enabled#` instead.",
      "markdownDescription": "Display Inlay Hints. Inlay Hints are variable annotations indicating their inferred type. They are only available if you are using Swift 5.6 or later.",
      "type": "boolean"
    },
    "sourcekit-lsp.serverArguments": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.serverArguments#` instead.",
      "markdownDescription": "Arguments to pass to SourceKit-LSP. Keys and values should be provided as individual entries in the list. e.g. `--experimental-feature=show-macro-expansions`",
      "type": "array"
    },
    "sourcekit-lsp.serverPath": {
      "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.serverPath#` instead.",
      "markdownDescription": "The path of the `sourcekit-lsp` executable. The default is to look in the path where `swift` is found.",
      "type": "string"
    },
    "sourcekit-lsp.support-c-cpp": {
      "default": "cpptools-inactive",
      "enum": [
        "enable",
        "disable",
        "cpptools-inactive"
      ],
      "enumDescriptions": [
        "Always enable",
        "Always disable",
        "Disable when C/C++ extension is active"
      ],
      "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.supported-languages#` instead.",
      "markdownDescription": "Add LSP functionality for C/C++ files. By default this is set to disable when the C/C++ extension is active.",
      "type": "string"
    },
    "sourcekit-lsp.trace.server": {
      "default": "off",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.trace.server#` instead.",
      "markdownDescription": "Traces the communication between VS Code and the SourceKit-LSP language server.",
      "type": "string"
    },
    "swift.SDK": {
      "default": "",
      "markdownDescription": "The path of the SDK to compile against (`--sdk` parameter). This is of use when supporting non-standard SDK layouts on Windows and using custom SDKs. The default SDK is determined by the environment on macOS and Windows.\n\nFor SwiftPM projects, prefer using `swift.swiftSDK` with a triple (such as `arm64-apple-ios`) or Swift SDK name instead.",
      "order": 3,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.actionAfterBuildError": {
      "default": "Focus Terminal",
      "enum": [
        "Focus Problems",
        "Focus Terminal",
        "Do Nothing"
      ],
      "enumDescriptions": [
        "Focus on Problems View",
        "Focus on Build Task Terminal"
      ],
      "markdownDescription": "Action after a Build task generates errors.",
      "scope": "application",
      "type": "string"
    },
    "swift.additionalTestArguments": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Additional arguments to pass to the `swift test` or `swift build` commands used when building and running tests from within VS Code.",
      "scope": "machine-overridable",
      "type": "array"
    },
    "swift.attachmentsPath": {
      "default": ".build/attachments",
      "markdownDescription": "The path to a directory that will be used to store attachments produced during a test run.\n\nA relative path resolves relative to the root directory of the workspace running the test(s)",
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.autoGenerateLaunchConfigurations": {
      "default": true,
      "markdownDescription": "When loading a `Package.swift`, auto-generate `launch.json` configurations for running any executables.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.backgroundCompilation": {
      "default": false,
      "markdownDescription": "**Experimental**: Run `swift build` in the background whenever a file is saved. It is possible the background compilation will already be running when you attempt a compile yourself, so this is disabled by default.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.buildArguments": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Additional arguments to pass to `swift build` and `swift test`. Keys and values should be provided as individual entries in the list. If you have created a copy of the build task in `tasks.json` then these build arguments will not be propagated to that task.",
      "scope": "machine-overridable",
      "type": "array"
    },
    "swift.buildPath": {
      "default": "",
      "markdownDescription": "The path to a directory that will be used for build artifacts. This path will be added to all swift package manager commands that are executed by vscode-swift extension via `--scratch-path` option. When no value provided - nothing gets passed to swift package manager and it will use its default value of `.build` folder in the workspace.\n\nYou can use absolute path for directory or the relative path, which will use the workspace path as a base. Note that VS Code does not respect tildes (`~`) in paths which represents user home folder under *nix systems.",
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.checkLspConfigurationSchema": {
      "default": true,
      "markdownDescription": "When opening a .sourckit-lsp/config.json configuration file, whether or not to check if the $schema matches the version of Swift you are using.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.createTasksForLibraryProducts": {
      "default": false,
      "markdownDescription": "When enabled, the extension will create \"swift\" build tasks for library products in the package manifest. Note that automatic library products will not be included.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.debugger.debugAdapter": {
      "default": "auto",
      "enum": [
        "auto",
        "lldb-dap",
        "CodeLLDB"
      ],
      "enumDescriptions": [
        "Automatically select which debug adapter to use based on your Swift toolchain version.",
        "Use the `lldb-dap` executable from the toolchain. Requires Swift 6 or later.",
        "Use the CodeLLDB extension's debug adapter."
      ],
      "markdownDescription": "Select which debug adapter to use to debug Swift executables.",
      "order": 1,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.debugger.path": {
      "default": "",
      "markdownDescription": "Path to lldb debug adapter.",
      "order": 2,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.debugger.setupCodeLLDB": {
      "default": "prompt",
      "enum": [
        "prompt",
        "alwaysUpdateGlobal",
        "alwaysUpdateWorkspace",
        "never"
      ],
      "enumDescriptions": [
        "Prompt to update CodeLLDB settings when they are incorrect.",
        "Always automatically update CodeLLDB settings globally when they are incorrect.",
        "Always automatically update CodeLLDB settings in the workspace when they are incorrect.",
        "Never automatically update CodeLLDB settings when they are incorrect."
      ],
      "markdownDescription": "Choose how CodeLLDB settings are updated when debugging Swift executables.",
      "order": 3,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.debugger.useDebugAdapterFromToolchain": {
      "default": false,
      "markdownDeprecationMessage": "**Deprecated**: Use the `swift.debugger.debugAdapter` setting instead. This will be removed in future versions of the Swift extension.",
      "markdownDescription": "Use the LLDB debug adapter packaged with the Swift toolchain as your debug adapter. Note: this is only available starting with Swift 6. The CodeLLDB extension will be used if your Swift toolchain does not contain lldb-dap.",
      "order": 4,
      "type": "boolean"
    },
    "swift.diagnostics": {
      "default": false,
      "deprecationMessage": "**Deprecated**: Please use `#swift.outputChannelLogLevel#` instead.",
      "markdownDescription": "Output additional diagnostics to the Swift output channel.",
      "order": 100,
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.diagnosticsCollection": {
      "default": "keepSourceKit",
      "enum": [
        "onlySwiftc",
        "onlySourceKit",
        "keepSwiftc",
        "keepSourceKit",
        "keepAll"
      ],
      "enumDescriptions": [
        "Only provide diagnostics from `swiftc`.",
        "Only provide diagnostics from `SourceKit`.",
        "When merging diagnostics, give precedence to diagnostics from `swiftc`.",
        "When merging diagnostics, give precedence to diagnostics from `SourceKit`.",
        "Keep diagnostics from all providers."
      ],
      "markdownDescription": "Controls how diagnostics from the various providers are merged into the collection of `swift` errors and warnings shown in the Problems pane.",
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.diagnosticsStyle": {
      "default": "default",
      "enum": [
        "default",
        "llvm",
        "swift"
      ],
      "markdownDescription": "The formatting style used when printing diagnostics in the Problems panel. Corresponds to the `-diagnostic-style` option to pass to `swiftc` when running `swift` tasks.",
      "markdownEnumDescriptions": [
        "Use whichever diagnostics style `swiftc` produces by default.",
        "Use the `llvm` diagnostic style. This allows the parsing of \"notes\".",
        "Use the `swift` diagnostic style. This means that \"notes\" will not be parsed. This option has no effect in Swift versions prior to 5.10."
      ],
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.disableAutoResolve": {
      "default": false,
      "markdownDescription": "Disable automatic running of `swift package resolve` whenever the `Package.swift` or `Package.resolve` files are updated. This will also disable searching for command plugins and the initial test discovery process.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.disableSandox": {
      "default": false,
      "markdownDescription": "Disable sandboxing when running SwiftPM commands. In most cases you should keep the sandbox enabled and leave this setting set to `false`",
      "order": 4,
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.disableSwiftPackageManagerIntegration": {
      "default": false,
      "markdownDescription": "Disables automated Build Tasks, Package Dependency view, Launch configuration generation and TestExplorer.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.enableTerminalEnvironment": {
      "default": true,
      "markdownDescription": "Controls whether or not the extension will contribute environment variables defined in `Swift: Environment Variables` to the integrated terminal. If this is set to `true` and a custom `Swift: Path` is also set then the swift path is appended to the terminal's `PATH`.",
      "scope": "application",
      "type": "boolean"
    },
    "swift.excludeFromCodeCoverage": {
      "default": [],
      "description": "A list of paths to exclude from code coverage reports. Paths can be absolute or relative to the workspace root.",
      "items": {
        "type": "string"
      },
      "scope": "machine-overridable",
      "type": "array"
    },
    "swift.excludePathsFromActivation": {
      "additionalProperties": {
        "type": "boolean"
      },
      "markdownDescription": "Configure glob patterns for excluding Swift package folders from getting activated. This will take precedence over the glob patterns provided to `files.exclude`.",
      "type": "object"
    },
    "swift.excludePathsFromPackageDependencies": {
      "default": [
        "**/.git",
        "**/.github"
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "A list of glob patterns to exclude from the Package Dependencies view. Always use forward-slashes in glob expressions regardless of platform. This is combined with VS Code's default `files.exclude` setting.",
      "scope": "machine-overridable",
      "type": "array"
    },
    "swift.lspConfigurationBranch": {
      "markdownDescription": "Set the branch to use when setting the `$schema` property of the SourceKit-LSP configuration. For example: \"release/6.1\" or \"main\". When this setting is unset, the extension will determine the branch based on the version of the toolchain that is in use.",
      "type": "string"
    },
    "swift.openAfterCreateNewProject": {
      "default": "prompt",
      "enum": [
        "always",
        "alwaysNewWindow",
        "whenNoFolderOpen",
        "prompt"
      ],
      "enumDescriptions": [
        "Always open in current window.",
        "Always open in a new window.",
        "Only open in current window when no folder is opened.",
        "Always prompt for action."
      ],
      "markdownDescription": "Controls whether to open a swift project automatically after creating it.",
      "scope": "application",
      "type": "string"
    },
    "swift.outputChannelLogLevel": {
      "default": "info",
      "enum": [
        "debug",
        "info",
        "warn",
        "error"
      ],
      "markdownDescription": "The log level of the Swift output channel. This has no effect on the verbosity of messages written to the extension's log file.",
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.packageArguments": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Additional arguments to pass to swift commands that do package resolution, such as `swift package resolve`, `swift package update`, `swift build` and `swift test`. Keys and values should be provided as individual entries in the list.",
      "scope": "machine-overridable",
      "type": "array"
    },
    "swift.path": {
      "default": "",
      "markdownDescription": "Override the default path of the folder containing the Swift executables. The default is to look in the `PATH` environment variable. This path is also used to search for other executables used by the extension like `sourcekit-lsp` and `lldb`.",
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.pluginArguments": {
      "default": [],
      "markdownDescription": "Configure a list of arguments to pass to command invocations. This can either be an array of arguments, which will apply to all command invocations, or an object with command names as the key where the value is an array of arguments.",
      "oneOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "patternProperties": {
            "^([a-zA-Z0-9_-]+(:[a-zA-Z0-9_-]+)?)$": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "scope": "machine-overridable"
    },
    "swift.pluginPermissions": {
      "default": {},
      "markdownDescription": "Configures a list of permissions to be used when running a command plugins.\n\nPermissions objects are defined in the form:\n\n`{ \"PluginName:command\": { \"allowWritingToPackageDirectory\": true } }`.\n\nA key of `PluginName:command` will set permissions for a specific command. A key of `PluginName` will set permissions for all commands in the plugin.",
      "patternProperties": {
        "^([a-zA-Z0-9_-]+(:[a-zA-Z0-9_-]+)?)$": {
          "properties": {
            "allowNetworkConnections": {
              "description": "Allow the plugin to make network connections",
              "type": "string"
            },
            "allowWritingToDirectory": {
              "oneOf": [
                {
                  "description": "Allow the plugin to write to an additional directory",
                  "type": "string"
                },
                {
                  "description": "Allow the plugin to write to additional directories",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ]
            },
            "allowWritingToPackageDirectory": {
              "description": "Allow the plugin to write to the package directory",
              "type": "boolean"
            },
            "disableSandbox": {
              "description": "Disable using the sandbox when executing plugins",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "scope": "machine-overridable",
      "type": "object"
    },
    "swift.recordTestDuration": {
      "default": true,
      "markdownDescription": "Controls whether or not to record the duration of tests in the Test Explorer. This is used to show the duration of tests in the Test Explorer view. If you're experiencing performance issues when running a large number of tests that complete quickly, disabling this setting can make the UI more responsive.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.runtimePath": {
      "default": "",
      "markdownDescription": "The path of the folder containing the Swift runtime libraries. This is of use when supporting non-standard SDK layouts on Windows. On Windows the runtime path is added to the `Path` environment variable. This is of less use on macOS and Linux but will be added to `DYLD_LIBRARY_PATH` and `LD_LIBRARY_PATH` environment variables respectively on each platform. ",
      "order": 2,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.sanitizer": {
      "default": "off",
      "enum": [
        "off",
        "thread",
        "address"
      ],
      "markdownDescription": "Runtime [sanitizer instrumentation](https://www.swift.org/documentation/server/guides/llvm-sanitizers.html).",
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.scriptSwiftLanguageVersion": {
      "enum": [
        "6",
        "5",
        "4.2",
        "4",
        "Ask Every Run"
      ],
      "enumDescriptions": [
        "Use Swift 6 when running Swift scripts.",
        "Use Swift 5 when running Swift scripts.",
        "Prompt to select the Swift version each time a script is run."
      ],
      "markdownDescription": "The default Swift version to use when running Swift scripts.",
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.searchSubfoldersForPackages": {
      "default": false,
      "markdownDescription": "Search sub-folders of workspace folder for Swift Packages at start up.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.showBuildStatus": {
      "default": "swiftStatus",
      "enum": [
        "never",
        "swiftStatus",
        "progress",
        "notification"
      ],
      "enumDescriptions": [
        "Never show the Swift build status.",
        "Show the Swift build status in a status bar item provided by the Swift extension.",
        "Show the Swift build status in the \"Progress Message\" status bar item provided by VS Code.",
        "Show the Swift build status as a progress notification."
      ],
      "markdownDescription": "Controls where to show the Swift build progress when running a `swift` build task.",
      "scope": "application",
      "type": "string"
    },
    "swift.showCreateSwiftProjectInWelcomePage": {
      "default": true,
      "markdownDescription": "Controls whether or not the create new swift project button appears in the welcome page.",
      "scope": "application",
      "type": "boolean"
    },
    "swift.showTestCodeLenses": {
      "default": true,
      "items": {
        "enum": [
          "run",
          "debug",
          "coverage"
        ],
        "type": "string"
      },
      "markdownDescription": "Controls whether or not to show inline code lenses for running and debugging tests inline, above test and suite declarations. If set to an array, specify one or more of the following: 'run', 'debug', 'coverage'.",
      "scope": "application",
      "type": [
        "boolean",
        "array"
      ]
    },
    "swift.sourcekit-lsp.backgroundIndexing": {
      "default": "auto",
      "enum": [
        "on",
        "off",
        "auto"
      ],
      "markdownDescription": "Turns background indexing `on` or `off`. `auto` will enable background indexing if the Swift version is >= 6.1. This option has no effect in Swift versions prior to 6.0.",
      "order": 4,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.sourcekit-lsp.disable": {
      "default": false,
      "markdownDescription": "Disable SourceKit-LSP. This will turn off features like code completion, error diagnostics and jump-to-definition. Features like swift-testing test discovery will not work correctly.",
      "order": 6,
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.sourcekit-lsp.serverArguments": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Arguments to pass to SourceKit-LSP. Keys and values should be provided as individual entries in the list. e.g. `--experimental-feature=show-macro-expansions`",
      "order": 2,
      "type": "array"
    },
    "swift.sourcekit-lsp.serverPath": {
      "markdownDeprecationMessage": "**Deprecated**: The sourcekit-lsp executable relies on outputs from tools in your current toolchain. If your sourcekit-lsp version does not match your toolchain you may experience unexpected behaviour. Only modify this setting when developing sourcekit-lsp.",
      "markdownDescription": "The path of the `sourcekit-lsp` executable. The default is to look in the path where `swift` is found.",
      "order": 1,
      "type": "string"
    },
    "swift.sourcekit-lsp.supported-languages": {
      "default": [
        "swift",
        "objective-c",
        "objective-cpp",
        "c",
        "cpp"
      ],
      "items": {
        "enum": [
          "swift",
          "objective-c",
          "objective-cpp",
          "c",
          "cpp"
        ],
        "type": "string"
      },
      "markdownDescription": "List of languages supported by SourceKit-LSP. This is used to determine whether SourceKit-LSP should provide language features for a particular file type. If you want a different extension to provide support for a language, remove it from the list.",
      "order": 3,
      "scope": "machine-overridable",
      "type": "array"
    },
    "swift.sourcekit-lsp.trace.server": {
      "default": "off",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "markdownDescription": "Controls logging the communication between VS Code and the SourceKit-LSP language server. Logs can be viewed in Output > SourceKit Language Server.",
      "order": 5,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.swiftEnvironmentVariables": {
      "default": {},
      "markdownDescription": "Additional environment variables to pass to swift operations (`swift build`, `swift resolve`, etc...).",
      "order": 1,
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      },
      "scope": "machine-overridable",
      "type": "object"
    },
    "swift.swiftSDK": {
      "default": "",
      "markdownDescription": "The [Swift SDK](https://github.com/swiftlang/swift-evolution/blob/main/proposals/0387-cross-compilation-destinations.md) to compile against (`--swift-sdk` parameter).",
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.testEnvironmentVariables": {
      "default": {},
      "markdownDescription": "Environment variables to set when running tests. To set environment variables when debugging an application you should edit the `env` field in the relevant `launch.json` configuration.",
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      },
      "scope": "machine-overridable",
      "type": "object"
    },
    "swift.warnAboutSymlinkCreation": {
      "default": true,
      "markdownDescription": "Controls whether or not the extension will warn about being unable to create symlinks. (Windows only)",
      "scope": "application",
      "type": "boolean"
    }
  }
}
