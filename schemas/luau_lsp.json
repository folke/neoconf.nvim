{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "A Language Server Client for Luau",
  "properties": {
    "luau-lsp.autocompleteEnd": {
      "default": false,
      "deprecationMessage": "Deprecated: Please use luau-lsp.completion.autocompleteEnd instead.",
      "markdownDeprecationMessage": "**Deprecated**: Please use `#luau-lsp.completion.autocompleteEnd#` instead.",
      "markdownDescription": "Automatically insert an `end` when opening a block",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.bytecode.debugLevel": {
      "default": 1,
      "markdownDescription": "The `debugLevel` to use when compiling bytecode",
      "maximum": 2,
      "minimum": 0,
      "scope": "resource",
      "type": "number"
    },
    "luau-lsp.bytecode.typeInfoLevel": {
      "default": 1,
      "markdownDescription": "The `typeInfoLevel` to use when compiling bytecode",
      "maximum": 1,
      "minimum": 0,
      "scope": "resource",
      "type": "number"
    },
    "luau-lsp.bytecode.vectorCtor": {
      "default": "new",
      "markdownDescription": "The `vectorCtor` to use when compiling bytecode",
      "scope": "resource",
      "type": "string"
    },
    "luau-lsp.bytecode.vectorLib": {
      "default": "Vector3",
      "markdownDescription": "The `vectorLib` to use when compiling bytecode",
      "scope": "resource",
      "type": "string"
    },
    "luau-lsp.bytecode.vectorType": {
      "default": "Vector3",
      "markdownDescription": "The `vectorType` to use when compiling bytecode",
      "scope": "resource",
      "type": "string"
    },
    "luau-lsp.completion.addParentheses": {
      "default": true,
      "markdownDescription": "Add parentheses after completing a function call",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.addTabstopAfterParentheses": {
      "default": true,
      "markdownDescription": "If `#luau-lsp.completion.addParentheses#` is enabled, then include a tabstop after the parentheses for the cursor to move to",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.autocompleteEnd": {
      "default": false,
      "markdownDescription": "Automatically insert an `end` when opening a block",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.enableFragmentAutocomplete": {
      "default": false,
      "markdownDescription": "Enables the experimental fragment autocomplete system for performance improvements",
      "scope": "resource",
      "tags": [
        "preview"
      ],
      "type": "boolean"
    },
    "luau-lsp.completion.enabled": {
      "default": true,
      "markdownDescription": "Enable autocomplete",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.fillCallArguments": {
      "default": true,
      "markdownDescription": "Fill parameter names in an autocompleted function call, which can be tabbed through. Requires `#luau-lsp.completion.addParentheses#` to be enabled",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.imports.enabled": {
      "default": false,
      "markdownDescription": "Suggest automatic imports in completion items",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.imports.ignoreGlobs": {
      "default": [
        "**/_Index/**"
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Files that match these globs will not be shown during auto-import",
      "scope": "resource",
      "type": "array"
    },
    "luau-lsp.completion.imports.requireStyle": {
      "default": "auto",
      "enum": [
        "auto",
        "alwaysRelative",
        "alwaysAbsolute"
      ],
      "enumDescriptions": [
        "Automatically compute the style of require to use based on heuristics",
        "Always require the module relative to the current file",
        "Always require the module absolute based on root"
      ],
      "markdownDescription": "The style of requires when autocompleted",
      "scope": "resource",
      "type": "string"
    },
    "luau-lsp.completion.imports.separateGroupsWithLine": {
      "default": false,
      "markdownDescription": "Whether services and requires should be separated by an empty line",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.imports.stringRequires.enabled": {
      "default": false,
      "markdownDescription": "Whether to use string requires when auto-importing requires. Only checked if `#luau-lsp.platform.type#` is `roblox`",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.imports.suggestRequires": {
      "default": true,
      "markdownDescription": "Whether module requires are suggested in autocomplete",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.imports.suggestServices": {
      "default": true,
      "markdownDescription": "Whether GetService completions are suggested in autocomplete",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.showPropertiesOnMethodCall": {
      "default": false,
      "markdownDescription": "Whether to show non-function properties when performing a method call with a colon (e.g., `foo:bar`)",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.completion.suggestImports": {
      "default": false,
      "deprecationMessage": "Deprecated: Please use luau-lsp.completion.imports.enabled instead.",
      "markdownDeprecationMessage": "**Deprecated**: Please use `#luau-lsp.completion.imports.enabled#` instead.",
      "markdownDescription": "Suggest automatic imports in completion items",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.diagnostics.includeDependents": {
      "default": true,
      "markdownDescription": "Recompute diagnostics for dependents when a file changes. If `#luau-lsp.diagnostics.workspace#` is enabled, this is ignored",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.diagnostics.pullOnChange": {
      "default": true,
      "markdownDescription": "Whether to update document diagnostics whenever the text file changes",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.diagnostics.pullOnSave": {
      "default": true,
      "markdownDescription": "Whether to update document diagnostics whenever the text file is saved",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.diagnostics.strictDatamodelTypes": {
      "default": false,
      "markdownDescription": "Use strict DataModel types in diagnostics. When on, this is equivalent to the more expressive autocompletion types. When this is off, `game`/`script`/`workspace` (and their members) are all typed as `any`, and helps to prevent false positives. [Read More](https://github.com/JohnnyMorganz/luau-lsp/issues/83#issuecomment-1192865024)",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.diagnostics.workspace": {
      "default": false,
      "markdownDescription": "Compute diagnostics for the whole workspace",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.fflags.enableByDefault": {
      "default": false,
      "markdownDescription": "Enable all (boolean) Luau FFlags by default. These flags can later be overriden by `#luau-lsp.fflags.override#` and `#luau-lsp.fflags.sync#`",
      "scope": "window",
      "type": "boolean"
    },
    "luau-lsp.fflags.enableNewSolver": {
      "default": false,
      "markdownDescription": "Enables the flags required for Luau's new type solver. These flags can be overriden by `#luau-lsp.fflags.override#`",
      "scope": "window",
      "tags": [
        "preview"
      ],
      "type": "boolean"
    },
    "luau-lsp.fflags.override": {
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "markdownDescription": "Override FFlags passed to Luau",
      "scope": "window",
      "type": "object"
    },
    "luau-lsp.fflags.sync": {
      "default": true,
      "markdownDescription": "Sync currently enabled FFlags with Roblox's published FFlags.\nThis currently only syncs FFlags which begin with 'Luau'",
      "scope": "window",
      "tags": [
        "usesOnlineServices"
      ],
      "type": "boolean"
    },
    "luau-lsp.hover.enabled": {
      "default": true,
      "markdownDescription": "Enable hover",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.hover.includeStringLength": {
      "default": true,
      "markdownDescription": "Show string length when hovering over a string literal",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.hover.multilineFunctionDefinitions": {
      "default": false,
      "markdownDescription": "Show function definitions on multiple lines",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.hover.showTableKinds": {
      "default": false,
      "markdownDescription": "Show table kinds",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.hover.strictDatamodelTypes": {
      "default": true,
      "markdownDescription": "Use strict DataModel types in hover display. When on, this is equivalent to autocompletion types. When off, this is equivalent to diagnostic types",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.ignoreGlobs": {
      "default": [
        "**/_Index/**"
      ],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Diagnostics will not be reported for any file matching these globs unless the file is currently open",
      "scope": "resource",
      "type": "array"
    },
    "luau-lsp.index.enabled": {
      "default": true,
      "markdownDescription": "Whether all files in a workspace should be indexed into memory. If disabled, only limited support is available for features such as 'Find All References' and 'Rename'",
      "scope": "window",
      "type": "boolean"
    },
    "luau-lsp.index.maxFiles": {
      "default": 10000,
      "markdownDescription": "The maximum amount of files that can be indexed. If more files are indexed, more memory is needed",
      "scope": "window",
      "type": "number"
    },
    "luau-lsp.inlayHints.functionReturnTypes": {
      "default": false,
      "markdownDescription": "Show inlay hints for function return types",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.inlayHints.hideHintsForErrorTypes": {
      "default": false,
      "markdownDescription": "Whether type hints should be hidden if they resolve to an error type",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.inlayHints.hideHintsForMatchingParameterNames": {
      "default": true,
      "markdownDescription": "Whether type hints should be hidden if the resolved variable name matches the parameter name",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.inlayHints.makeInsertable": {
      "default": true,
      "markdownDescription": "Whether type annotation inlay hints can be made insertable by clicking",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.inlayHints.parameterNames": {
      "default": "none",
      "enum": [
        "none",
        "literals",
        "all"
      ],
      "markdownDescription": "Show inlay hints for function parameter names",
      "scope": "resource",
      "type": "string"
    },
    "luau-lsp.inlayHints.parameterTypes": {
      "default": false,
      "markdownDescription": "Show inlay hints for parameter types",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.inlayHints.typeHintMaxLength": {
      "default": 50,
      "markdownDescription": "The maximum length a type hint should be before being truncated",
      "minimum": 10,
      "scope": "resource",
      "type": "number"
    },
    "luau-lsp.inlayHints.variableTypes": {
      "default": false,
      "markdownDescription": "Show inlay hints for variable types",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.platform.type": {
      "default": "roblox",
      "enum": [
        "standard",
        "roblox"
      ],
      "markdownDescription": "Platform-specific support features",
      "scope": "window",
      "type": "string"
    },
    "luau-lsp.plugin.enabled": {
      "default": false,
      "markdownDescription": "Use Roblox Studio Plugin to provide DataModel information",
      "scope": "window",
      "type": "boolean"
    },
    "luau-lsp.plugin.maximumRequestBodySize": {
      "default": "3mb",
      "markdownDescription": "The maximum request body size accepted from the plugin, in a string representation parse-able by the [bytes](https://www.npmjs.com/package/bytes) library",
      "scope": "window",
      "type": "string"
    },
    "luau-lsp.plugin.port": {
      "default": 3667,
      "markdownDescription": "Port number to connect to the Studio Plugin",
      "scope": "window",
      "type": "number"
    },
    "luau-lsp.require.directoryAliases": {
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "deprecationMessage": "Deprecated: Please use aliases in a .luaurc file instead.",
      "markdownDeprecationMessage": "**Deprecated**: Please use `aliases` in a `.luaurc` file instead.",
      "markdownDescription": "A mapping of custom require string prefixes to directory paths. The aliases should include trailing slashes",
      "scope": "resource",
      "type": "object"
    },
    "luau-lsp.require.fileAliases": {
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "deprecationMessage": "Deprecated: Please use aliases in a .luaurc file instead.",
      "markdownDeprecationMessage": "**Deprecated**: Please use `aliases` in a `.luaurc` file instead.",
      "markdownDescription": "A mapping of custom require string aliases to file paths",
      "scope": "resource",
      "type": "object"
    },
    "luau-lsp.require.useOriginalRequireByStringSemantics": {
      "default": false,
      "deprecationMessage": "Deprecated: Use the new require-by-string semantics instead. This option may be removed at any time in the future",
      "markdownDeprecationMessage": "**Deprecated**: Use the new require-by-string semantics instead. This option may be removed at any time in the future",
      "markdownDescription": "Use the old require-by-string semantics for init.luau resolution",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.server.communicationChannel": {
      "default": "stdio",
      "enum": [
        "stdio",
        "pipe"
      ],
      "enumDescriptions": [
        "Communicate via stdin/stdout (default)",
        "Communicate via UNIX socket files. Useful for debugging"
      ],
      "markdownDescription": "Type of communication channel to use for communicating with the server. Only useful for debug purposes",
      "type": "string"
    },
    "luau-lsp.server.crashReporting.enabled": {
      "default": false,
      "markdownDescription": "Upload crash reports to Sentry",
      "tags": [
        "usesOnlineServices"
      ],
      "type": "boolean"
    },
    "luau-lsp.server.delayStartup": {
      "default": false,
      "markdownDescription": "Make the server spin indefinitely when starting up to allow time to attach a debugger. Only useful for debug purposes",
      "type": "boolean"
    },
    "luau-lsp.server.path": {
      "default": "",
      "markdownDescription": "Path to the Luau LSP server binary. If not provided, uses the binary included in the extension.",
      "type": "string"
    },
    "luau-lsp.signatureHelp.enabled": {
      "default": true,
      "markdownDescription": "Enable signature help",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.sourcemap.autogenerate": {
      "default": true,
      "markdownDescription": "Automatically run the `rojo sourcemap` command to regenerate sourcemaps on changes",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.sourcemap.enabled": {
      "default": true,
      "markdownDescription": "Whether Rojo sourcemap parsing is enabled",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.sourcemap.generatorCommand": {
      "markdownDescription": "A command to run to generate the sourcemap. If not specified, defaults to `rojo`",
      "scope": "resource",
      "type": "string"
    },
    "luau-lsp.sourcemap.includeNonScripts": {
      "default": true,
      "markdownDescription": "Include non-script instances in the generated sourcemap",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.sourcemap.rojoPath": {
      "default": null,
      "markdownDescription": "Path to the Rojo executable. If not provided, attempts to run `rojo` in the workspace directory, so it must be available on the PATH",
      "scope": "resource",
      "type": "string"
    },
    "luau-lsp.sourcemap.rojoProjectFile": {
      "default": "default.project.json",
      "markdownDescription": "The name of the Rojo project file to generate a sourcemap for.\nOnly applies if `#luau-lsp.sourcemap.autogenerate#` is enabled",
      "scope": "resource",
      "type": "string"
    },
    "luau-lsp.sourcemap.sourcemapFile": {
      "default": "sourcemap.json",
      "markdownDescription": "The name of the sourcemap file",
      "scope": "resource",
      "type": "string"
    },
    "luau-lsp.sourcemap.useVSCodeWatcher": {
      "default": false,
      "markdownDescription": "Whether the VSCode filesystem watchers are used to regenerate the sourcemap. If disabled, delegates to the generator process. If using `rojo`, this command stops using `--watch`",
      "scope": "resource",
      "type": "boolean"
    },
    "luau-lsp.types.definitionFiles": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "A list of paths to definition files to load in to the type checker. Note that definition file syntax is currently unstable and may change at any time",
      "scope": "window",
      "type": "array"
    },
    "luau-lsp.types.disabledGlobals": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "A list of globals to remove from the global scope. Accepts full libraries or particular functions (e.g., `table` or `table.clone`)",
      "scope": "window",
      "type": "array"
    },
    "luau-lsp.types.documentationFiles": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "A list of paths to documentation files which provide documentation support to the definition files provided",
      "scope": "window",
      "type": "array"
    },
    "luau-lsp.types.roblox": {
      "default": true,
      "deprecationMessage": "Deprecated: Please use luau-lsp.platform.type instead.",
      "markdownDeprecationMessage": "**Deprecated**: Please use `#luau-lsp.platform.type#` instead.",
      "markdownDescription": "Load in and automatically update Roblox type definitions for the type checker",
      "scope": "window",
      "tags": [
        "usesOnlineServices"
      ],
      "type": "boolean"
    },
    "luau-lsp.types.robloxSecurityLevel": {
      "default": "PluginSecurity",
      "enum": [
        "None",
        "LocalUserSecurity",
        "PluginSecurity",
        "RobloxScriptSecurity"
      ],
      "markdownDescription": "Security Level to use in the Roblox API definitions",
      "scope": "window",
      "type": "string"
    },
    "luau.trace.server": {
      "default": "off",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "markdownDescription": "Traces the communication between VS Code and the Luau language server.",
      "scope": "window",
      "type": "string"
    }
  }
}
